[{"C:\\Users\\Alex\\Documents\\react-person\\src\\index.js":"1","C:\\Users\\Alex\\Documents\\react-person\\src\\reportWebVitals.js":"2","C:\\Users\\Alex\\Documents\\react-person\\src\\App.js":"3","C:\\Users\\Alex\\Documents\\react-person\\src\\components\\PersonForm\\PersonForm.js":"4","C:\\Users\\Alex\\Documents\\react-person\\src\\components\\PersonList\\PersonList.js":"5","C:\\Users\\Alex\\Documents\\react-person\\src\\api\\PersonAPI.js":"6","C:\\Users\\Alex\\Documents\\react-person\\src\\utils\\ListFilter.js":"7","C:\\Users\\Alex\\Documents\\react-person\\src\\utils\\FormData.js":"8"},{"size":500,"mtime":499162500000,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"10"},{"size":1189,"mtime":1632569759604,"results":"12","hashOfConfig":"10"},{"size":3064,"mtime":1632570299714,"results":"13","hashOfConfig":"10"},{"size":19380,"mtime":1632577349492,"results":"14","hashOfConfig":"10"},{"size":2127,"mtime":1632569190367,"results":"15","hashOfConfig":"10"},{"size":754,"mtime":1632563007139,"results":"16","hashOfConfig":"10"},{"size":281,"mtime":1632561582034,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1nqk49s",{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Users\\Alex\\Documents\\react-person\\src\\index.js",[],["39","40"],"C:\\Users\\Alex\\Documents\\react-person\\src\\reportWebVitals.js",[],"C:\\Users\\Alex\\Documents\\react-person\\src\\App.js",[],"C:\\Users\\Alex\\Documents\\react-person\\src\\components\\PersonForm\\PersonForm.js",["41"],"import React from 'react';\r\nimport './PersonForm.css';\r\nimport Button from '@material-ui/core/Button';\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport { postFormDataAsJson } from '../../api/PersonAPI';\r\nimport { convertFormDataToObject } from '../../utils/FormData';\r\n\r\nexport default function PersonForm( { setPersonList, setFormData, formData, initialState }) {\r\n    // Mise à jour du formulaire\r\n    const stateUpdate = target => {\r\n        setFormData(prevState => {\r\n            return {...prevState, [target.name]: target.value};\r\n        });\r\n    }\r\n    \r\n    // Gérer le formulaire de l'ajout d'une personne\r\n    const handleFormSubmit = async (e) => {\r\n        e.preventDefault();\r\n    \r\n        try {\r\n            const { formData, url } = convertFormDataToObject(e);\r\n            const responseData = await postFormDataAsJson({ formData, url });\r\n            setPersonList(prevState => {\r\n                return [responseData, ...prevState];\r\n            });\r\n            setFormData(initialState);\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form className=\"personForm\" action=\"/person\" onSubmit={handleFormSubmit} style={{ backgroundColor: '#9AC2C9'}}>\r\n            <h1 style={{paddingLeft: '24px', color: '#008080', fontWeight: '700'}}>Ajouter une Personne</h1>\r\n            <div className=\"personForm__item\">\r\n                <label>Prénom</label>\r\n                <input type=\"text\" placeholder=\"Votre prénom\" value={formData.firstname} name=\"firstname\" onChange={e => stateUpdate(e.target)} required />\r\n            </div>\r\n            <div className=\"personForm__item\">\r\n                <label>Nom</label>\r\n                <input type=\"text\" placeholder=\"Votre nom de famille\" value={formData.lastname} name=\"lastname\" onChange={e => stateUpdate(e.target)} required />\r\n            </div>\r\n            <div className=\"personForm__item\">\r\n                <label>Adresse Email</label>\r\n                <input type=\"email\" placeholder=\"-----@-----.---\" value={formData.address} name=\"address\" onChange={e => stateUpdate(e.target)} required />\r\n            </div>\r\n            <div className=\"personForm__item\">\r\n                <label>Actif</label>\r\n                <select onChange={e => stateUpdate(e.target)} value={formData.isActive} name=\"isActive\">\r\n                    <option value=\"true\">Oui</option>\r\n                    <option value=\"false\">Non</option>\r\n                </select>\r\n            </div>\r\n            <div className=\"personForm__item\">\r\n                <Button \r\n                    variant=\"contained\" \r\n                    color=\"primary\" \r\n                    type=\"submit\"\r\n                    value=\"Ajouter Personne\"\r\n                    style={{ borderRadius: 50 }} \r\n                    endIcon={<AddCircleOutlineIcon />}\r\n                    style={{backgroundColor: '#008080' }}\r\n                >\r\n                    Ajouter Personne\r\n                </Button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\n","C:\\Users\\Alex\\Documents\\react-person\\src\\components\\PersonList\\PersonList.js",["42","43","44"],"import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport './PersonList.css';\r\nimport $ from \"jquery\";\r\nimport Scrollbars from 'react-custom-scrollbars';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport { putFormDataAsJson, deletePerson } from '../../api/PersonAPI';\r\nimport { convertFormDataToObject } from '../../utils/FormData';\r\nimport { getListOfFilteredID } from '../../utils/ListFilter';\r\n\r\n\r\n// Initialisation des valeurs de filtres\r\nconst initialFilteredPerson = {\r\n    id: '',\r\n    firstname: '',\r\n    lastname: '',\r\n    address: '',\r\n    isActive: ''\r\n}\r\n\r\nexport default function PersonList({ setPersonList, personList }) {\r\n    const classes = useStyles();\r\n    const [editedRowIndex, setEditedRowIndex] = useState(null);\r\n    const [filterOptions, setFilterOptions]  = useState(initialFilteredPerson);\r\n    const [filteredListPerson, setFilteredListPerson] = useState([]);\r\n\r\n    // Gestion du state stockant les valeurs de filtrage\r\n    const handleFormFilterInput = (e) => {\r\n        const { value, name } = e.target;\r\n        setFilterOptions(prevState => {\r\n            return {...prevState, [name]: value}\r\n        });\r\n    }\r\n\r\n    // permet de switcher sur le mode édition d'une ligne\r\n    const toggleIsEditing = (e) => {\r\n        if ($(e.currentTarget).attr('class').includes('editableIcon')) {\r\n            const personID = $($(e.currentTarget).parents()[3]).find('.personID').text();\r\n            const editableIndex = personList.findIndex(item => parseInt(item.id) === parseInt(personID));\r\n            setEditedRowIndex(editableIndex);\r\n        }\r\n    }   \r\n\r\n    // Element React pour la modification d'une ligne\r\n    const EditableRow = ({ value, name, type, lastRow }) => {\r\n        return (\r\n            <React.Fragment>\r\n            <div style={{ display: \"flex\", justifyContent: \"flex-start\", width: lastRow ? '70%' : '100%' }}>\r\n                <input\r\n                    className={`MuiTypography-root MuiTypography-h7 MuiTypography-displayInline`}\r\n                    defaultValue={value}\r\n                    name={name}\r\n                    type={type}\r\n                    style={{border: '#008080 solid 0.5px', width: '100%', margin: '2px'}}\r\n                />\r\n            </div>\r\n            </React.Fragment>\r\n        )\r\n    };\r\n\r\n    // Gérer le formulaire de la mise à jour d'une personne\r\n    const handleFormSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        // Récupérer les données du formulaire\r\n        const personID = $(e.currentTarget).find('.personID').find('input').attr('value');\r\n        const updateIndex = personList.findIndex(item => parseInt(item.id) === parseInt(personID));\r\n        const url = `person/${personID}`;\r\n\r\n        try {\r\n            // Requête PUT\r\n            const { formData, _} = convertFormDataToObject(e);\r\n            let responseData = await putFormDataAsJson({ formData, url });\r\n            console.log(responseData);\r\n\r\n            // Mise à jour de la liste des utilisateurs\r\n            setPersonList(prevState => {\r\n                return  [...prevState.slice(0, updateIndex), responseData, ...prevState.slice(updateIndex + 1)];\r\n            });\r\n\r\n            setEditedRowIndex(-1);\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    // Initialisation du state stockant la liste filtrée\r\n    useEffect(() => {\r\n        setFilteredListPerson(personList);\r\n    }, [personList]);\r\n\r\n    // Appel à l'algorithme à chaque fois qu'une valeur de filtrage change\r\n    useEffect(() => {\r\n        const filteredID = getListOfFilteredID(filterOptions, personList);\r\n        console.log(typeof(filteredID[0]))\r\n        if (filteredID.length != 0) {\r\n            setFilteredListPerson(personList.filter((item, index) => filteredID.includes(String(item.id))));\r\n        }\r\n    }, [filterOptions]);\r\n\r\n    console.log(filteredListPerson);\r\n\r\n    return (\r\n        <>\r\n        <Scrollbars style={{ width: '70%', height: '100%' }} renderTrackHorizontal={props => <div {...props} style={{display: 'none'}} className=\"track-horizontal\"/>}>\r\n          <Grid item xs={16} md={12}>\r\n              <List className={classes.List}>\r\n                    <ListItem className={classes.listItem} style={{ backgroundColor: '#9AC2C980' }}>\r\n                        <ListItemText\r\n                            disableTypography\r\n                            primary={<Typography type=\"body2\" style={{ fontWeight: 700, width: 10, color: '#004040' }}>ID</Typography>}\r\n                            className={classes.listItemText}\r\n                        />\r\n                        <ListItemText\r\n                            disableTypography\r\n                            primary={<Typography type=\"body2\" style={{ fontWeight: 700, width: 10, color: '#004040' }}>Prénom</Typography>}\r\n                            className={classes.listItemText}\r\n                        />\r\n                        <ListItemText\r\n                            disableTypography\r\n                            primary={<Typography type=\"body2\" style={{ fontWeight: 700, width: 10, color: '#004040' }}>Nom</Typography>}\r\n                            className={classes.listItemText}\r\n                        />\r\n                        <ListItemText\r\n                            disableTypography\r\n                            primary={<Typography type=\"body2\" style={{ fontWeight: 700, width: 10, color: '#004040' }}>Adresse</Typography>}\r\n                            className={classes.listItemText}\r\n                        />\r\n                        <ListItemText\r\n                            disableTypography\r\n                            primary={<Typography type=\"body2\" style={{ fontWeight: 700, width: 10, color: '#004040', paddingRight: 30 }}>Actif</Typography>}\r\n                            className={classes.listItemText}\r\n                        />\r\n                        <ListItemSecondaryAction>\r\n                            <IconButton edge=\"end\" aria-label=\"delete\" type=\"submit\">\r\n                                <SendIcon \r\n                                    style={{display: \"none\"}} \r\n                                />\r\n                            </IconButton>\r\n                        </ListItemSecondaryAction>\r\n                        <ListItemSecondaryAction>\r\n                            <IconButton edge=\"end\" aria-label=\"delete\" type=\"submit\">\r\n                                <SendIcon \r\n                                    style={{display: \"none\"}} \r\n                                />\r\n                            </IconButton>\r\n                        </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                    <form className=\"filterForm\">\r\n                        <ListItem className={classes.listItem}>\r\n                            <ListItemText\r\n                                disableTypography\r\n                                primary={\r\n                                <div style={{ display: \"flex\", justifyContent: \"flex-start\", width: '100%' }}>\r\n                                    <input\r\n                                        className=\"MuiTypography-root MuiTypography-h7 MuiTypography-displayInline\"\r\n                                        defaultValue={filterOptions[\"id\"]}\r\n                                        onChange={handleFormFilterInput}\r\n                                        name={\"id\"}\r\n                                        style={{border: '#008080 solid 0.5px', width: '100%', margin: '2px'}}\r\n                                        placeholder=\"Filtrer\"\r\n                                    />\r\n                                </div>}\r\n                                className={classes.listItemText} \r\n                            />\r\n                            <ListItemText\r\n                                disableTypography\r\n                                primary={\r\n                                <div style={{ display: \"flex\", justifyContent: \"flex-start\", width: '100%' }}>\r\n                                    <input\r\n                                        className=\"MuiTypography-root MuiTypography-h7 MuiTypography-displayInline\"\r\n                                        defaultValue={filterOptions[\"firstname\"]}\r\n                                        onChange={handleFormFilterInput}\r\n                                        name={\"firstname\"}\r\n                                        style={{border: '#008080 solid 0.5px', width: '100%', margin: '2px'}}\r\n                                        placeholder=\"Filtrer\"\r\n                                    />\r\n                                </div>}\r\n                                className={classes.listItemText}\r\n                            />\r\n                            <ListItemText\r\n                                disableTypography\r\n                                primary={\r\n                                <div style={{ display: \"flex\", justifyContent: \"flex-start\", width: '100%' }}>\r\n                                    <input\r\n                                        className=\"MuiTypography-root MuiTypography-h7 MuiTypography-displayInline\"\r\n                                        defaultValue={filterOptions[\"lastname\"]}\r\n                                        onChange={handleFormFilterInput}\r\n                                        name={\"lastname\"}\r\n                                        style={{border: '#008080 solid 0.5px', width: '100%', margin: '2px'}}\r\n                                        placeholder=\"Filtrer\"\r\n                                    />\r\n                                </div>}\r\n                                className={classes.listItemText}\r\n                            />\r\n                            <ListItemText\r\n                                disableTypography\r\n                                primary={\r\n                                <div style={{ display: \"flex\", justifyContent: \"flex-start\", width: '100%' }}>\r\n                                    <input\r\n                                        className=\"MuiTypography-root MuiTypography-h7 MuiTypography-displayInline\"\r\n                                        defaultValue={filterOptions[\"address\"]}\r\n                                        onChange={handleFormFilterInput}\r\n                                        name={\"address\"}\r\n                                        style={{border: '#008080 solid 0.5px', width: '100%', margin: '2px'}}\r\n                                        placeholder=\"Filtrer\"    \r\n                                    />\r\n                                </div>}\r\n                                className={classes.listItemText}\r\n                            />\r\n                            <ListItemText\r\n                                disableTypography\r\n                                primary={\r\n                                <div style={{ display: \"flex\", justifyContent: \"flex-start\", width: '70%' }}>\r\n                                    <input\r\n                                        className=\"MuiTypography-root MuiTypography-h7 MuiTypography-displayInline\"\r\n                                        defaultValue={filterOptions[\"isActive\"]}\r\n                                        onChange={handleFormFilterInput}\r\n                                        name={\"isActive\"}\r\n                                        style={{border: '#008080 solid 0.5px', width: '100%', margin: '2px'}}\r\n                                        placeholder=\"Filtrer\"\r\n                                    />\r\n                                </div>}\r\n                                className={classes.listItemText}\r\n                            />\r\n                        </ListItem>\r\n                    </form>\r\n                {filteredListPerson.map((item, index) => (\r\n                    index === editedRowIndex ? ( \r\n                        <form className=\"editForm\" onSubmit={handleFormSubmit}>\r\n                            <ListItem className={classes.listItem}>\r\n                                <ListItemText\r\n                                    disableTypography\r\n                                    primary={<EditableRow value={item.id} name={\"id\"}/>}\r\n                                    className={`${classes.listItemText} personID`}\r\n                                />\r\n                                <ListItemText\r\n                                    disableTypography\r\n                                    primary={<EditableRow value={item.firstname} name={\"firstname\"} />}\r\n                                    className={classes.listItemText}\r\n                                />\r\n                                <ListItemText\r\n                                    disableTypography\r\n                                    primary={<EditableRow value={item.lastname} name={\"lastname\"} />}\r\n                                    className={classes.listItemText}\r\n                                />\r\n                                <ListItemText\r\n                                    disableTypography\r\n                                    primary={<EditableRow value={item.address} name={\"address\"} type={\"email\"}/>}\r\n                                    className={classes.listItemText}\r\n                                />\r\n                                <ListItemText\r\n                                    disableTypography\r\n                                    primary={<EditableRow value={item.isActive} name={\"isActive\"} lastRow={true} />}\r\n                                    className={classes.listItemText}\r\n                                />\r\n                                <ListItemSecondaryAction>\r\n                                    <IconButton edge=\"end\" aria-label=\"delete\" type=\"submit\">\r\n                                        <SendIcon \r\n                                            style={{fill: \"#008080\"}} \r\n                                        />\r\n                                    </IconButton>\r\n                                </ListItemSecondaryAction>\r\n                            </ListItem>\r\n                       </form>\r\n                        ) : (\r\n                    <ListItem className={classes.listItem}>\r\n                            <ListItemText\r\n                            disableTypography\r\n                            primary={<Typography type=\"body2\">{item.id}</Typography>}\r\n                            className={`${classes.listItemText} personID`}\r\n                            />\r\n                            <ListItemText\r\n                            disableTypography\r\n                            primary={<Typography type=\"body2\" >{item.firstname}</Typography>}\r\n                            className={classes.listItemText}\r\n                            />\r\n                            <ListItemText\r\n                            disableTypography\r\n                            primary={<Typography type=\"body2\">{item.lastname}</Typography>}\r\n                            className={classes.listItemText}\r\n                            />\r\n                            <ListItemText\r\n                            disableTypography\r\n                            primary={<Typography type=\"body2\">{item.address}</Typography>}\r\n                            className={classes.listItemText}\r\n                            />\r\n                            <ListItemText\r\n                            disableTypography\r\n                            primary={<Typography type=\"body2\">{item.isActive ? '1' : '0'}</Typography>}\r\n                            className={classes.listItemText}\r\n                            />\r\n                        <ListItemSecondaryAction>\r\n                        <IconButton edge=\"end\" aria-label=\"edit\">\r\n                            <EditIcon \r\n                                style={{fill: \"#008080\"}} \r\n                                onClick={toggleIsEditing}\r\n                                className=\"editableIcon\" \r\n                            />\r\n                        </IconButton>\r\n                        <IconButton edge=\"end\" aria-label=\"delete\">\r\n                            <CloseIcon \r\n                                style={{fill: \"#008080\"}} \r\n                                onClick={(e) => {\r\n                                    const personID = $($(e.currentTarget).parents()[3]).find('.personID').text();\r\n                                    deletePerson(e, personID).then(() => {\r\n                                        // Récuperer l'index de l'élément à supprimer\r\n                                        const removeIndex = personList.findIndex(item => item.id === parseInt(personID));\r\n                                    \r\n                                        // Faire une copie du state\r\n                                        const newArray = [...personList];\r\n                                    \r\n                                        // Supprimer l'élément du nouveau tableau\r\n                                        newArray.splice(removeIndex, 1);\r\n                                    \r\n                                        // Mettre à jour le state\r\n                                        setPersonList(newArray);\r\n                                    });\r\n                                }} \r\n                            />\r\n                        </IconButton>\r\n                        </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                    )\r\n                ))}\r\n              </List>\r\n          </Grid>\r\n        </Scrollbars>\r\n        </>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    listItem: {\r\n      backgroundColor: 'none',\r\n      \"&:hover\": {\r\n          backgroundColor: 'rgba(0,0,0,0.05);',\r\n          cursor: 'pointer'\r\n      },\r\n      padding: 4,\r\n    },\r\n    listItemText: {\r\n        display: 'flex',\r\n        justifyContent: 'flex-start',\r\n        '&:nth-child(1)': {\r\n            width: '10%',\r\n            justifyContent: 'center',\r\n        },\r\n        '&:nth-child(2)': {\r\n            width: '20%'\r\n        },\r\n        '&:nth-child(3)': {\r\n            width: '20%'\r\n        },\r\n        '&:nth-child(4)': {\r\n            width: '30%'\r\n        },\r\n        '&:nth-child(5)': {\r\n            width: '20%',\r\n        }\r\n    },\r\n    button: {\r\n      margin: theme.spacing(1),\r\n      [theme.breakpoints.down(\"sm\")]: {\r\n        minWidth: 32,\r\n        paddingLeft: 8,\r\n        paddingRight: 8,\r\n        marginBottom: 40,\r\n        cursor: \"pointer\",\r\n        \"& .MuiButton-startIcon\": {\r\n          margin: 0\r\n        }\r\n      }\r\n    },\r\n    buttonText: {\r\n      [theme.breakpoints.down(\"sm\")]: {\r\n        display: \"none\"\r\n      },\r\n      display: \"flex\",\r\n      marginRight: 5\r\n    },\r\n    List: {\r\n        padding: 0,\r\n    },\r\n    Input: {\r\n        '&:nth-child(5)': {\r\n            width: '70%'\r\n        }\r\n    }\r\n}));","C:\\Users\\Alex\\Documents\\react-person\\src\\api\\PersonAPI.js",["45"],"import $ from \"jquery\";\r\n\r\n// Récupérer toutes les personnes de la base de données\r\nconst getAllPerson = async () => {\r\n    const myInit = {\r\n        method: 'GET',\r\n        headers: {\r\n        'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    return await fetch('/person', myInit)\r\n        .then(response => {\r\n            if(response.ok) {\r\n                return response.json();\r\n            }\r\n            throw response;\r\n        });\r\n}\r\n\r\n// Récupérer une ou toutes les personnes de la base de données\r\nconst postFormDataAsJson = async ({ formData, url }) => {\r\n    const plainFormData = Object.fromEntries(formData.entries());\r\n    const formDataJsonString = JSON.stringify(plainFormData);\r\n\r\n    const fetchOptions = {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Accept\": \"application/json\",\r\n        },\r\n        body: formDataJsonString,\r\n    };\r\n\r\n    const response = await fetch(url, fetchOptions);\r\n\r\n    if (!response.ok) {\r\n        const errorMessage = await response.text();\r\n        throw new Error(errorMessage);\r\n    }\r\n\r\n    return response.json();\r\n}\r\n\r\n// Mettre à jour une personne\r\nconst putFormDataAsJson = async ({ formData, url }) => {\r\n    console.log(formData);\r\n    const plainFormData = Object.fromEntries(formData.entries());\r\n    const formDataJsonString = JSON.stringify(plainFormData);\r\n\r\n    const fetchOptions = {\r\n        method: \"PUT\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Accept\": \"application/json\",\r\n        },\r\n        body: formDataJsonString,\r\n    };\r\n\r\n    const response = await fetch(url, fetchOptions);\r\n\r\n    if (!response.ok) {\r\n        const errorMessage = await response.text();\r\n        throw new Error(errorMessage);\r\n    }\r\n\r\n    return response.json();\r\n}\r\n\r\n\r\n// Supprimer une personne de la liste\r\nconst deletePerson = async (e, personID) => {\r\n    const myInit = {\r\n        method: 'DELETE',\r\n    };\r\n    return await fetch(`person/${personID}`, myInit);\r\n};\r\n\r\nexport { getAllPerson, postFormDataAsJson, putFormDataAsJson, deletePerson }","C:\\Users\\Alex\\Documents\\react-person\\src\\utils\\ListFilter.js",["46","47","48"],"// Algorithme de filtrage de la liste\r\nexport const getListOfFilteredID = (filterOptions, list) => {\r\n    let counter = {}\r\n    list.map(item => counter[item.id] = 0);\r\n    list.map(item => {\r\n        Object.entries(item).map(val => {\r\n            if (String(val[1]).toLowerCase().startsWith(String(filterOptions[val[0]]).toLowerCase()) && String(filterOptions[val[0]]) != '') {\r\n                counter[item[\"id\"]] += 1;\r\n            }\r\n        });  \r\n    });\r\n    const numberOfFieldsFilled = Object.values(filterOptions).filter(Boolean).length;\r\n    counter = Object.entries(counter).filter(val => val[1] === numberOfFieldsFilled);\r\n    counter = Object.fromEntries(counter);\r\n    const idFiltered = Object.keys(counter);\r\n\r\n    return idFiltered;\r\n};","C:\\Users\\Alex\\Documents\\react-person\\src\\utils\\FormData.js",[],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":62,"column":21,"nodeType":"55","messageId":"56","endLine":62,"endColumn":58},{"ruleId":"57","severity":1,"message":"58","line":82,"column":31,"nodeType":"59","messageId":"60","endLine":82,"endColumn":32},{"ruleId":"61","severity":1,"message":"62","line":106,"column":31,"nodeType":"63","messageId":"64","endLine":106,"endColumn":33},{"ruleId":"65","severity":1,"message":"66","line":109,"column":8,"nodeType":"67","endLine":109,"endColumn":23,"suggestions":"68"},{"ruleId":"57","severity":1,"message":"69","line":1,"column":8,"nodeType":"59","messageId":"60","endLine":1,"endColumn":9},{"ruleId":"70","severity":1,"message":"71","line":5,"column":19,"nodeType":"72","messageId":"73","endLine":5,"endColumn":21},{"ruleId":"70","severity":1,"message":"71","line":6,"column":38,"nodeType":"72","messageId":"73","endLine":6,"endColumn":40},{"ruleId":"61","severity":1,"message":"62","line":7,"column":135,"nodeType":"63","messageId":"64","endLine":7,"endColumn":137},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","no-unused-vars","'_' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'personList'. Either include it or remove the dependency array. If 'setFilteredListPerson' needs the current value of 'personList', you can also switch to useReducer instead of useState and read 'personList' in the reducer.","ArrayExpression",["76"],"'$' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation",{"desc":"77","fix":"78"},"Update the dependencies array to be: [filterOptions, personList]",{"range":"79","text":"80"},[4392,4407],"[filterOptions, personList]"]