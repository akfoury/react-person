[{"C:\\Users\\Alex\\Documents\\react-person\\src\\index.js":"1","C:\\Users\\Alex\\Documents\\react-person\\src\\reportWebVitals.js":"2","C:\\Users\\Alex\\Documents\\react-person\\src\\App.js":"3","C:\\Users\\Alex\\Documents\\react-person\\src\\components\\PersonForm\\PersonForm.js":"4","C:\\Users\\Alex\\Documents\\react-person\\src\\components\\PersonList\\PersonList.js":"5","C:\\Users\\Alex\\Documents\\react-person\\src\\api\\PersonAPI.js":"6","C:\\Users\\Alex\\Documents\\react-person\\src\\utils\\ListFilter.js":"7","C:\\Users\\Alex\\Documents\\react-person\\src\\utils\\FormData.js":"8","C:\\Users\\Alex\\Documents\\react-person\\src\\components\\FilterInput\\FilterInput.js":"9","C:\\Users\\Alex\\Documents\\react-person\\src\\store.js":"10","C:\\Users\\Alex\\Documents\\react-person\\src\\reducers\\index.js":"11","C:\\Users\\Alex\\Documents\\react-person\\src\\reducers\\PersonListReducer.js":"12","C:\\Users\\Alex\\Documents\\react-person\\src\\actions\\index.js":"13","C:\\Users\\Alex\\Documents\\react-person\\src\\actions\\actions-types.js":"14","C:\\Users\\Alex\\Documents\\react-person\\src\\components\\FilterInputList\\FilterInputList.js":"15","C:\\Users\\Alex\\Documents\\react-person\\src\\reducers\\FormDataReducer.js":"16"},{"size":616,"mtime":1633002233213,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":499162500000,"results":"19","hashOfConfig":"18"},{"size":865,"mtime":1633121620231,"results":"20","hashOfConfig":"18"},{"size":3266,"mtime":1633122148572,"results":"21","hashOfConfig":"18"},{"size":13517,"mtime":1633122515459,"results":"22","hashOfConfig":"18"},{"size":2383,"mtime":1633112587863,"results":"23","hashOfConfig":"18"},{"size":754,"mtime":1632563007139,"results":"24","hashOfConfig":"18"},{"size":281,"mtime":1632561582034,"results":"25","hashOfConfig":"18"},{"size":555,"mtime":1632995371730,"results":"26","hashOfConfig":"18"},{"size":331,"mtime":1633002443737,"results":"27","hashOfConfig":"18"},{"size":288,"mtime":1633120731826,"results":"28","hashOfConfig":"18"},{"size":1221,"mtime":1633109982136,"results":"29","hashOfConfig":"18"},{"size":747,"mtime":1633121429413,"results":"30","hashOfConfig":"18"},{"size":255,"mtime":1633120573072,"results":"31","hashOfConfig":"18"},{"size":3953,"mtime":1633100376114,"results":"32","hashOfConfig":"18"},{"size":573,"mtime":1633121686122,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"uimjg5",{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"36"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Alex\\Documents\\react-person\\src\\index.js",[],["71","72"],"C:\\Users\\Alex\\Documents\\react-person\\src\\reportWebVitals.js",[],"C:\\Users\\Alex\\Documents\\react-person\\src\\App.js",["73"],"import './App.css';\nimport PersonForm from './components/PersonForm/PersonForm';\nimport PersonList from './components/PersonList/PersonList';\nimport { useEffect } from 'react';\nimport { getAllPerson } from \"../src/api/PersonAPI\";\nimport { connect } from \"react-redux\";\nimport { setPersonList } from './actions';\n\nfunction App({ setPersonList }) {\n  // Récupération de toutes les personnes au lancement de l'application\n  useEffect(() => {\n    getAllPerson(1, 20)\n      .then(data => {\n        data = data.map(obj => ({...obj, visibility: true}));\n        setPersonList(data);\n      });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <PersonForm />\n      <PersonList />\n    </div>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n  }\n}\n\nconst mapDispatchToProps = {\n  setPersonList\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n","C:\\Users\\Alex\\Documents\\react-person\\src\\components\\PersonForm\\PersonForm.js",[],"C:\\Users\\Alex\\Documents\\react-person\\src\\components\\PersonList\\PersonList.js",["74","75","76","77"],"import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport './PersonList.css';\r\nimport { convertFormDataToObject } from '../../utils/FormData';\r\nimport { connect } from \"react-redux\";\r\nimport { getAllPerson } from \"../../api/PersonAPI\";\r\nimport { \r\n    putFormDataAsJson, \r\n    deletePerson\r\n} from '../../api/PersonAPI';\r\nimport {\r\n    List,\r\n    ListItem,\r\n    ListItemSecondaryAction,\r\n    ListItemText,\r\n    IconButton,\r\n    Grid,\r\n    Typography,\r\n    Button,\r\n    ButtonGroup,\r\n    Chip,\r\n    Select,\r\n    MenuItem,\r\n    FormControl\r\n} from '@mui/material';\r\nimport {\r\n    Close,\r\n    Send,\r\n    Edit,\r\n    ArrowForward,\r\n    ArrowBack\r\n} from '@mui/icons-material';\r\nimport { setPersonList, deletePersonList, updatePersonList } from \"../../actions\";\r\nimport FilterInputList from \"../FilterInputList/FilterInputList\";\r\n\r\n\r\nfunction PersonList({ personList, setPersonList, deletePersonList, updatePersonList }) {\r\n    const [editedRowIndex, setEditedRowIndex] = useState(null);\r\n    const [pagination, setPagination] = useState(1);\r\n    const [numRows, setNumRows] = useState(20);\r\n\r\n    // permet de switcher sur le mode édition d'une ligne\r\n    const toggleIsEditing = (e) => {\r\n        const personID = e.currentTarget.dataset.idedit;\r\n        const editableIndex = personList.findIndex(item => parseInt(item.id) === parseInt(personID));\r\n        setEditedRowIndex(editableIndex);\r\n    }  \r\n    \r\n    // gestion du button delete\r\n    const handleDelete = async (e) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        // Récupérer l'id de la ligne\r\n        const personID = e.currentTarget.dataset.iddelete;\r\n        console.log(personID);\r\n\r\n        // Supprimer la personne\r\n        const responseData = await deletePerson(personID);\r\n\r\n        console.log(personList);\r\n\r\n        // Récuperer l'index de l'élément à supprimer\r\n        const removeIndex = personList.findIndex(item => parseInt(item.id) === parseInt(personID));\r\n        console.log(removeIndex);\r\n\r\n        // Mettre à jour le state\r\n        deletePersonList(removeIndex);\r\n    }\r\n\r\n    // Element React pour la modification d'une ligne\r\n    const EditableRow = ({ value, name, type }) => {\r\n        return (\r\n            <React.Fragment>\r\n            <div style={{ display: \"flex\", justifyContent: \"flex-start\"}}>\r\n                <input\r\n                    defaultValue={value}\r\n                    name={name}\r\n                    type={type}\r\n                    style={{border: '#008080 solid 0.5px', width: '100%', margin: '2px'}}\r\n                    required\r\n                />\r\n            </div>\r\n            </React.Fragment>\r\n        )\r\n    };\r\n\r\n    // Gérer le formulaire de la mise à jour d'une personne\r\n    const handleFormSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        // Récupérer les données du formulaire\r\n        const personID = e.currentTarget.querySelector('button[type=submit]').dataset.idsend;\r\n        const updateIndex = personList.findIndex(item => parseInt(item.id) === parseInt(personID));\r\n        console.log(updateIndex);\r\n        const url = `person/${personID}`;\r\n\r\n        try {\r\n            // Requête PUT\r\n            const { formData, _} = convertFormDataToObject(e);\r\n            let responseData = await putFormDataAsJson({ formData, url });\r\n\r\n            responseData = {...responseData, visibility: true};\r\n            // Mise à jour de la liste des utilisateurs\r\n            updatePersonList(updateIndex, responseData);\r\n\r\n            setEditedRowIndex(-1);\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    const incrementPagination = (e) => {\r\n        const direction = e.currentTarget.getAttribute('aria-label');\r\n\r\n        if (direction === \"left-pagination\") {\r\n            setPagination(prevState => prevState === 1 ? prevState : prevState - 1);\r\n        } else {\r\n            setPagination(prevState => prevState + 1);\r\n        }\r\n    }\r\n\r\n    const updatePagination = (e) => {\r\n        const re = /^[+]?\\d+([.]\\d+)?$/;\r\n    \r\n        // if value is not blank, then test the regex\r\n        if (e.target.value === '' || re.test(e.target.value)) {\r\n           setPagination(parseInt(e.target.value));\r\n        }\r\n    }\r\n\r\n    const updateNumRows = (e) => {\r\n        setNumRows(parseInt(e.target.value));\r\n    }\r\n\r\n    useEffect(() => {\r\n        document.querySelectorAll('.show').forEach((elem) => {\r\n            elem.parentElement.style.display = \"list-item\";\r\n        });\r\n\r\n        document.querySelectorAll('.hide').forEach((elem) => {\r\n            elem.parentElement.style.display = \"none\";\r\n        });\r\n    }, [personList]);\r\n\r\n    useEffect(() => {\r\n        getAllPerson(pagination, numRows)\r\n            .then(data => {\r\n                data = data.map(obj => ({...obj, visibility: true}));\r\n                setPersonList(data);\r\n            });\r\n    }, [pagination, numRows]);\r\n\r\n    console.log(personList);\r\n    console.log(numRows)\r\n\r\n    return (\r\n        <div className=\"personList\">\r\n        <Grid>\r\n            <ListItem className='list-item' style={{ backgroundColor: '#9AC2C980' }} ContainerComponent=\"div\">\r\n                <ListItemText\r\n                    disableTypography\r\n                    primary={<Button type=\"body2\">ID</Button>}\r\n                    className='list-item-text'\r\n                />\r\n                <ListItemText\r\n                    disableTypography\r\n                    primary={<Button type=\"body2\">Prénom</Button>}\r\n                    className='list-item-text'\r\n                />\r\n                <ListItemText\r\n                    disableTypography\r\n                    primary={<Button type=\"body2\">Nom</Button>}\r\n                    className='list-item-text'\r\n                />\r\n                <ListItemText\r\n                    disableTypography\r\n                    primary={<Button type=\"body2\">Adresse</Button>}\r\n                    className='list-item-text'\r\n                />\r\n                <ListItemText\r\n                    disableTypography\r\n                    primary={<Button type=\"body2\">Actif</Button>}\r\n                    className='list-item-text'\r\n                />\r\n                <ListItemSecondaryAction>\r\n                    <IconButton edge=\"end\" aria-label=\"delete\" type=\"submit\">\r\n                        <Send \r\n                            style={{display: \"none\"}} \r\n                        />\r\n                    </IconButton>\r\n                </ListItemSecondaryAction>\r\n                <ListItemSecondaryAction>\r\n                    <IconButton edge=\"end\" aria-label=\"delete\" type=\"submit\">\r\n                        <Send \r\n                            style={{display: \"none\"}} \r\n                        />\r\n                    </IconButton>\r\n                </ListItemSecondaryAction>\r\n            </ListItem>\r\n            <FilterInputList />\r\n        </Grid>\r\n        <Grid item xs={16} md={12} className=\"grid\">\r\n            <List className='list'>\r\n            {personList.length != 0 && personList.map((item, index) => (\r\n                index === editedRowIndex ? ( \r\n                    <form className=\"editForm\" onSubmit={handleFormSubmit}>\r\n                        <ListItem className='list-item'>\r\n                            <ListItemText\r\n                                disableTypography\r\n                                primary={<EditableRow value={item.id} name=\"id\" />}\r\n                                className='list-item-text personID'\r\n                            />\r\n                            <ListItemText\r\n                                disableTypography\r\n                                primary={<EditableRow value={item.firstname} name=\"firstname\" />}\r\n                                className='list-item-text'\r\n                            />\r\n                            <ListItemText\r\n                                disableTypography\r\n                                primary={<EditableRow value={item.lastname} name=\"lastname\" />}\r\n                                className='list-item-text'\r\n                            />\r\n                            <ListItemText\r\n                                disableTypography\r\n                                primary={<EditableRow value={item.address} name=\"address\" type=\"email\"/>}\r\n                                className='list-item-text'\r\n                            />\r\n                            <ListItemText\r\n                                disableTypography\r\n                                primary={<EditableRow value={item.isActive} name=\"isActive\" />}\r\n                                className='list-item-text'\r\n                            />\r\n                            <ListItemSecondaryAction>\r\n                                <IconButton edge=\"end\" aria-label=\"edit\" type=\"submit\" data-idsend={item.id}>\r\n                                    <Send \r\n                                        style={{fill: \"#008080\"}} \r\n                                    />\r\n                                </IconButton>\r\n                            </ListItemSecondaryAction>\r\n                        </ListItem>\r\n                    </form>\r\n                    ) : (\r\n                        <ListItem className={`list-item ${item.visibility ? \"show\": \"hide\"}`}>\r\n                            <ListItemText\r\n                            disableTypography\r\n                            primary={<Typography type=\"body2\">{item.id}</Typography>}\r\n                            className='list-item-text personID'\r\n                            />\r\n                            <ListItemText\r\n                            disableTypography\r\n                            primary={<Typography type=\"body2\" >{item.firstname}</Typography>}\r\n                            className='list-item-text'\r\n                            />\r\n                            <ListItemText\r\n                            disableTypography\r\n                            primary={<Typography type=\"body2\">{item.lastname}</Typography>}\r\n                            className='list-item-text'\r\n                            />\r\n                            <ListItemText\r\n                            disableTypography\r\n                            primary={<Typography type=\"body2\">{item.address}</Typography>}\r\n                            className='list-item-text'\r\n                            />\r\n                            <ListItemText\r\n                            disableTypography\r\n                            primary={parseInt(item.isActive) ? <Chip style={{backgroundColor: 'rgba(53, 219, 94, 0.8)', color: 'white', fontWeight: 700}} label=\"Actif\" /> : <Chip style={{backgroundColor: 'rgba(209, 42, 23, 0.8)', color: 'white', fontWeight: 700}} label=\"Inactif\" />}\r\n                            className='list-item-text'\r\n                            />\r\n                            <ListItemSecondaryAction>\r\n                                <IconButton edge=\"end\" aria-label=\"edit\" onClick={toggleIsEditing} data-idedit={item.id} >\r\n                                    <Edit \r\n                                        style={{fill: \"#008080\"}} \r\n                                    />\r\n                                </IconButton>\r\n                                <IconButton edge=\"end\" aria-label=\"delete\" onClick={handleDelete} data-iddelete={item.id}>\r\n                                    <Close \r\n                                        style={{fill: \"#008080\"}} \r\n                                    />\r\n                                </IconButton>\r\n                            </ListItemSecondaryAction>\r\n                        </ListItem>\r\n                    )\r\n                )\r\n            )}\r\n            </List>\r\n        </Grid>\r\n        <Grid>\r\n            <List>\r\n                <ListItem className=\"pagination-listitem\">\r\n                    <ButtonGroup>\r\n                        <IconButton edge=\"end\" id=\"left-pagination\" aria-label=\"left-pagination\" onClick={incrementPagination}>\r\n                            <ArrowBack \r\n                                style={{fill: \"#008080\"}} \r\n                            />\r\n                        </IconButton>\r\n                        <input type=\"text\" size=\"1\" value={pagination} onChange={updatePagination} id=\"input-pagination\"/>\r\n                        <IconButton edge=\"end\" id=\"right-pagination\" aria-label=\"right-pagination\" onClick={incrementPagination}>\r\n                            <ArrowForward \r\n                                style={{fill: \"#008080\"}} \r\n                            />\r\n                        </IconButton>\r\n                    </ButtonGroup>\r\n                    <FormControl className=\"pagination-select\">\r\n                        <Select defaultValue=\"20\" value={numRows} onChange={updateNumRows} label=\"Pagination\">\r\n                            <MenuItem value={20}>20</MenuItem>\r\n                            <MenuItem value={40}>40</MenuItem>\r\n                            <MenuItem value={60}>60</MenuItem>\r\n                            <MenuItem value={100}>100</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n                </ListItem>\r\n            </List>\r\n        </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        personList: state.personList.personList,\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    setPersonList,\r\n    updatePersonList,\r\n    deletePersonList\r\n  }\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(PersonList);\r\n  ","C:\\Users\\Alex\\Documents\\react-person\\src\\api\\PersonAPI.js",[],"C:\\Users\\Alex\\Documents\\react-person\\src\\utils\\ListFilter.js",["78","79","80"],"// Algorithme de filtrage de la liste\r\nexport const getListOfFilteredID = (filterOptions, list) => {\r\n    let counter = {}\r\n    list.map(item => counter[item.id] = 0);\r\n    list.map(item => {\r\n        Object.entries(item).map(val => {\r\n            if (String(val[1]).toLowerCase().startsWith(String(filterOptions[val[0]]).toLowerCase()) && String(filterOptions[val[0]]) != '') {\r\n                counter[item[\"id\"]] += 1;\r\n            }\r\n        });  \r\n    });\r\n    const numberOfFieldsFilled = Object.values(filterOptions).filter(Boolean).length;\r\n    counter = Object.entries(counter).filter(val => val[1] === numberOfFieldsFilled);\r\n    counter = Object.fromEntries(counter);\r\n    const idFiltered = Object.keys(counter);\r\n\r\n    return idFiltered;\r\n};","C:\\Users\\Alex\\Documents\\react-person\\src\\utils\\FormData.js",[],"C:\\Users\\Alex\\Documents\\react-person\\src\\components\\FilterInput\\FilterInput.js",[],"C:\\Users\\Alex\\Documents\\react-person\\src\\store.js",[],"C:\\Users\\Alex\\Documents\\react-person\\src\\reducers\\index.js",[],"C:\\Users\\Alex\\Documents\\react-person\\src\\reducers\\PersonListReducer.js",[],"C:\\Users\\Alex\\Documents\\react-person\\src\\actions\\index.js",[],"C:\\Users\\Alex\\Documents\\react-person\\src\\actions\\actions-types.js",[],"C:\\Users\\Alex\\Documents\\react-person\\src\\components\\FilterInputList\\FilterInputList.js",["81","82"],"import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport FilterInput from '../FilterInput/FilterInput';\r\nimport { getListOfFilteredID } from '../../utils/ListFilter';\r\nimport { \r\n    deleteAllPerson \r\n} from '../../api/PersonAPI';\r\nimport { setPersonList } from \"../../actions\";\r\nimport { ClearAll } from '@mui/icons-material';\r\nimport {\r\n    ListItem,\r\n    ListItemSecondaryAction,\r\n    ListItemText,\r\n    IconButton,\r\n} from '@mui/material';\r\n\r\n// Initialisation des valeurs de filtres\r\nconst initialFilteredPersonList = {\r\n    id: '',\r\n    firstname: '',\r\n    lastname: '',\r\n    address: '',\r\n    isActive: ''\r\n}\r\n\r\nfunction FilterInputList({ personList, setPersonList }) {\r\n    const [filterOptions, setFilterOptions]  = useState(initialFilteredPersonList);\r\n\r\n    // Gestion du state stockant les valeurs de filtrage\r\n    const handleFormFilterInput = (e) => {\r\n        const { value, name } = e.target;\r\n        setFilterOptions(prevState => {\r\n            return {...prevState, [name]: value}\r\n        });\r\n    }\r\n\r\n    // Suppression de toutes les lignes\r\n    const handleDeleteAll = (e) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        deleteAllPerson().then(() => {\r\n            setPersonList([]);\r\n        });\r\n    }\r\n\r\n    // Appel de l'algorithme à chaque fois qu'une valeur de filtrage change\r\n    useEffect(() => {\r\n        const filteredID = getListOfFilteredID(filterOptions, personList);\r\n        if (filteredID.length != 0) {\r\n            setPersonList(personList.map(obj => filteredID.includes(String(obj.id)) ? ({...obj, visibility: true}) : ({...obj, visibility: false})));\r\n        }\r\n    }, [filterOptions]);\r\n\r\n    return (\r\n        <form className=\"filterForm\">\r\n            <ListItem className='list-item filters' ContainerComponent=\"div\">\r\n                <ListItemText\r\n                    disableTypography\r\n                    primary={<FilterInput filterOptions={filterOptions} optionName=\"id\" handleFormFilterInput={handleFormFilterInput} />}\r\n                    className='list-item-text'\r\n                />\r\n                <ListItemText\r\n                    disableTypography\r\n                    primary={<FilterInput filterOptions={filterOptions} optionName=\"firstname\" handleFormFilterInput={handleFormFilterInput} />}\r\n                    className='list-item-text'\r\n                />\r\n                <ListItemText\r\n                    disableTypography\r\n                    primary={<FilterInput filterOptions={filterOptions} optionName=\"lastname\" handleFormFilterInput={handleFormFilterInput} />}\r\n                    className='list-item-text'\r\n                />\r\n                <ListItemText\r\n                    disableTypography\r\n                    primary={<FilterInput filterOptions={filterOptions} optionName=\"address\" handleFormFilterInput={handleFormFilterInput} />}\r\n                    className='list-item-text'\r\n                />\r\n                <ListItemText\r\n                    disableTypography\r\n                    primary={<FilterInput filterOptions={filterOptions} optionName=\"isActive\" handleFormFilterInput={handleFormFilterInput} />}\r\n                    className='list-item-text'\r\n                />\r\n                <ListItemSecondaryAction>\r\n                    <IconButton edge=\"end\" aria-label=\"deleteall\" onClick={handleDeleteAll}>\r\n                        <ClearAll\r\n                            style={{fill: \"#008080\"}} \r\n                            fontSize=\"large\"\r\n                        />\r\n                    </IconButton>\r\n                </ListItemSecondaryAction>\r\n            </ListItem>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        personList: state.personList.personList,\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    setPersonList,\r\n  }\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(FilterInputList);\r\n\r\n","C:\\Users\\Alex\\Documents\\react-person\\src\\reducers\\FormDataReducer.js",[],{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":17,"column":6,"nodeType":"89","endLine":17,"endColumn":8,"suggestions":"90"},{"ruleId":"91","severity":1,"message":"92","line":59,"column":15,"nodeType":"93","messageId":"94","endLine":59,"endColumn":27},{"ruleId":"91","severity":1,"message":"95","line":100,"column":31,"nodeType":"93","messageId":"94","endLine":100,"endColumn":32},{"ruleId":"87","severity":1,"message":"88","line":152,"column":8,"nodeType":"89","endLine":152,"endColumn":29,"suggestions":"96"},{"ruleId":"97","severity":1,"message":"98","line":205,"column":32,"nodeType":"99","messageId":"100","endLine":205,"endColumn":34},{"ruleId":"101","severity":1,"message":"102","line":5,"column":19,"nodeType":"103","messageId":"104","endLine":5,"endColumn":21},{"ruleId":"101","severity":1,"message":"102","line":6,"column":38,"nodeType":"103","messageId":"104","endLine":6,"endColumn":40},{"ruleId":"97","severity":1,"message":"98","line":7,"column":135,"nodeType":"99","messageId":"100","endLine":7,"endColumn":137},{"ruleId":"97","severity":1,"message":"98","line":51,"column":31,"nodeType":"99","messageId":"100","endLine":51,"endColumn":33},{"ruleId":"87","severity":1,"message":"105","line":54,"column":8,"nodeType":"89","endLine":54,"endColumn":23,"suggestions":"106"},"no-native-reassign",["107"],"no-negated-in-lhs",["108"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setPersonList'. Either include it or remove the dependency array. If 'setPersonList' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["109"],"no-unused-vars","'responseData' is assigned a value but never used.","Identifier","unusedVar","'_' is assigned a value but never used.",["110"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'personList' and 'setPersonList'. Either include them or remove the dependency array. If 'setPersonList' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["111"],"no-global-assign","no-unsafe-negation",{"desc":"112","fix":"113"},{"desc":"114","fix":"115"},{"desc":"116","fix":"117"},"Update the dependencies array to be: [setPersonList]",{"range":"118","text":"119"},"Update the dependencies array to be: [pagination, numRows, setPersonList]",{"range":"120","text":"121"},"Update the dependencies array to be: [filterOptions, personList, setPersonList]",{"range":"122","text":"123"},[591,593],"[setPersonList]",[4892,4913],"[pagination, numRows, setPersonList]",[1705,1720],"[filterOptions, personList, setPersonList]"]