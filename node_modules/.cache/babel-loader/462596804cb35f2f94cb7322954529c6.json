{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/Alex/Documents/react-person/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/Alex/Documents/react-person/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";// Récupérer toutes les personnes de la base de données\nvar getAllPerson=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(pageNum,numRows){var myInit;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:myInit={method:'GET',headers:{'Content-Type':'application/json'}};return _context.abrupt(\"return\",fetch(\"/person/\".concat(pageNum,\"/\").concat(numRows),myInit).then(function(response){if(response.ok){return response.json();}throw response;}));case 2:case\"end\":return _context.stop();}}},_callee);}));return function getAllPerson(_x,_x2){return _ref.apply(this,arguments);};}();// Ajouter une personne à la base de données\nvar postFormDataAsJson=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref2){var formData,url,plainFormData,formDataJsonString,fetchOptions,response,errorMessage;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:formData=_ref2.formData,url=_ref2.url;plainFormData=Object.fromEntries(formData.entries());formDataJsonString=JSON.stringify(plainFormData);fetchOptions={method:\"POST\",headers:{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"},body:formDataJsonString};_context2.next=6;return fetch(url,fetchOptions);case 6:response=_context2.sent;if(response.ok){_context2.next=12;break;}_context2.next=10;return response.text();case 10:errorMessage=_context2.sent;throw new Error(errorMessage);case 12:return _context2.abrupt(\"return\",response.json());case 13:case\"end\":return _context2.stop();}}},_callee2);}));return function postFormDataAsJson(_x3){return _ref3.apply(this,arguments);};}();// Mettre à jour une personne\nvar putFormDataAsJson=/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_ref4){var formData,url,plainFormData,formDataJsonString,fetchOptions,response,errorMessage;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:formData=_ref4.formData,url=_ref4.url;plainFormData=Object.fromEntries(formData.entries());formDataJsonString=JSON.stringify(plainFormData);fetchOptions={method:\"PUT\",headers:{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"},body:formDataJsonString};_context3.next=6;return fetch(url,fetchOptions);case 6:response=_context3.sent;if(response.ok){_context3.next=10;break;}errorMessage=response.text();throw new Error(errorMessage);case 10:return _context3.abrupt(\"return\",response.json());case 11:case\"end\":return _context3.stop();}}},_callee3);}));return function putFormDataAsJson(_x4){return _ref5.apply(this,arguments);};}();// Supprimer une personne de la liste\nvar deletePerson=/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(personID){var myInit,response;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:myInit={method:'DELETE'};console.log(personID);_context4.next=4;return fetch(\"person/\".concat(personID),myInit);case 4:response=_context4.sent;return _context4.abrupt(\"return\",response);case 6:case\"end\":return _context4.stop();}}},_callee4);}));return function deletePerson(_x5){return _ref6.apply(this,arguments);};}();// Supprimer toutes les personnes de la liste\nvar deleteAllPerson=/*#__PURE__*/function(){var _ref7=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(){var myInit,response;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:myInit={method:'DELETE'};_context5.next=3;return fetch('person/',myInit);case 3:response=_context5.sent;return _context5.abrupt(\"return\",response);case 5:case\"end\":return _context5.stop();}}},_callee5);}));return function deleteAllPerson(){return _ref7.apply(this,arguments);};}();export{getAllPerson,postFormDataAsJson,putFormDataAsJson,deletePerson,deleteAllPerson};","map":{"version":3,"sources":["C:/Users/Alex/Documents/react-person/src/api/PersonAPI.js"],"names":["getAllPerson","pageNum","numRows","myInit","method","headers","fetch","then","response","ok","json","postFormDataAsJson","formData","url","plainFormData","Object","fromEntries","entries","formDataJsonString","JSON","stringify","fetchOptions","body","text","errorMessage","Error","putFormDataAsJson","deletePerson","personID","console","log","deleteAllPerson"],"mappings":"mTAAA;AACA,GAAMA,CAAAA,YAAY,0FAAG,iBAAOC,OAAP,CAAgBC,OAAhB,6HACXC,MADW,CACF,CACXC,MAAM,CAAE,KADG,CAEXC,OAAO,CAAE,CACT,eAAgB,kBADP,CAFE,CADE,iCAQVC,KAAK,mBAAYL,OAAZ,aAAuBC,OAAvB,EAAkCC,MAAlC,CAAL,CACFI,IADE,CACG,SAAAC,QAAQ,CAAI,CACd,GAAGA,QAAQ,CAACC,EAAZ,CAAgB,CACZ,MAAOD,CAAAA,QAAQ,CAACE,IAAT,EAAP,CACH,CACD,KAAMF,CAAAA,QAAN,CACH,CANE,CARU,wDAAH,kBAAZR,CAAAA,YAAY,gDAAlB,CAkBA;AACA,GAAMW,CAAAA,kBAAkB,2FAAG,kOAASC,QAAT,OAASA,QAAT,CAAmBC,GAAnB,OAAmBA,GAAnB,CACjBC,aADiB,CACDC,MAAM,CAACC,WAAP,CAAmBJ,QAAQ,CAACK,OAAT,EAAnB,CADC,CAEjBC,kBAFiB,CAEIC,IAAI,CAACC,SAAL,CAAeN,aAAf,CAFJ,CAIjBO,YAJiB,CAIF,CACjBjB,MAAM,CAAE,MADS,CAEjBC,OAAO,CAAE,CACL,eAAgB,kBADX,CAEL,SAAU,kBAFL,CAFQ,CAMjBiB,IAAI,CAAEJ,kBANW,CAJE,wBAaAZ,CAAAA,KAAK,CAACO,GAAD,CAAMQ,YAAN,CAbL,QAajBb,QAbiB,mBAelBA,QAAQ,CAACC,EAfS,mDAgBQD,CAAAA,QAAQ,CAACe,IAAT,EAhBR,SAgBbC,YAhBa,qBAiBb,IAAIC,CAAAA,KAAJ,CAAUD,YAAV,CAjBa,0CAoBhBhB,QAAQ,CAACE,IAAT,EApBgB,2DAAH,kBAAlBC,CAAAA,kBAAkB,8CAAxB,CAuBA;AACA,GAAMe,CAAAA,iBAAiB,2FAAG,kOAASd,QAAT,OAASA,QAAT,CAAmBC,GAAnB,OAAmBA,GAAnB,CAChBC,aADgB,CACAC,MAAM,CAACC,WAAP,CAAmBJ,QAAQ,CAACK,OAAT,EAAnB,CADA,CAEhBC,kBAFgB,CAEKC,IAAI,CAACC,SAAL,CAAeN,aAAf,CAFL,CAIhBO,YAJgB,CAID,CACjBjB,MAAM,CAAE,KADS,CAEjBC,OAAO,CAAE,CACL,eAAgB,kBADX,CAEL,SAAU,kBAFL,CAFQ,CAMjBiB,IAAI,CAAEJ,kBANW,CAJC,wBAaCZ,CAAAA,KAAK,CAACO,GAAD,CAAMQ,YAAN,CAbN,QAahBb,QAbgB,mBAgBjBA,QAAQ,CAACC,EAhBQ,2BAiBZe,YAjBY,CAiBGhB,QAAQ,CAACe,IAAT,EAjBH,MAkBZ,IAAIE,CAAAA,KAAJ,CAAUD,YAAV,CAlBY,0CAqBfhB,QAAQ,CAACE,IAAT,EArBe,2DAAH,kBAAjBgB,CAAAA,iBAAiB,8CAAvB,CAyBA;AACA,GAAMC,CAAAA,YAAY,2FAAG,kBAAOC,QAAP,0IACXzB,MADW,CACF,CACXC,MAAM,CAAE,QADG,CADE,CAIjByB,OAAO,CAACC,GAAR,CAAYF,QAAZ,EAJiB,uBAKMtB,CAAAA,KAAK,kBAAWsB,QAAX,EAAuBzB,MAAvB,CALX,QAKXK,QALW,iDAOVA,QAPU,0DAAH,kBAAZmB,CAAAA,YAAY,8CAAlB,CAUA;AACA,GAAMI,CAAAA,eAAe,2FAAG,4JACd5B,MADc,CACL,CACXC,MAAM,CAAE,QADG,CADK,wBAIGE,CAAAA,KAAK,CAAC,SAAD,CAAYH,MAAZ,CAJR,QAIdK,QAJc,iDAMbA,QANa,0DAAH,kBAAfuB,CAAAA,eAAe,2CAArB,CASA,OAAS/B,YAAT,CAAuBW,kBAAvB,CAA2Ce,iBAA3C,CAA8DC,YAA9D,CAA4EI,eAA5E","sourcesContent":["// Récupérer toutes les personnes de la base de données\r\nconst getAllPerson = async (pageNum, numRows) => {\r\n    const myInit = {\r\n        method: 'GET',\r\n        headers: {\r\n        'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    return fetch(`/person/${pageNum}/${numRows}`, myInit)\r\n        .then(response => {\r\n            if(response.ok) {\r\n                return response.json();\r\n            }\r\n            throw response;\r\n        });\r\n}\r\n\r\n\r\n// Ajouter une personne à la base de données\r\nconst postFormDataAsJson = async ({ formData, url }) => {\r\n    const plainFormData = Object.fromEntries(formData.entries());\r\n    const formDataJsonString = JSON.stringify(plainFormData);\r\n\r\n    const fetchOptions = {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Accept\": \"application/json\",\r\n        },\r\n        body: formDataJsonString,\r\n    };\r\n\r\n    const response = await fetch(url, fetchOptions);\r\n\r\n    if (!response.ok) {\r\n        const errorMessage = await response.text();\r\n        throw new Error(errorMessage);\r\n    }\r\n\r\n    return response.json();\r\n}\r\n\r\n// Mettre à jour une personne\r\nconst putFormDataAsJson = async ({ formData, url }) => {\r\n    const plainFormData = Object.fromEntries(formData.entries());\r\n    const formDataJsonString = JSON.stringify(plainFormData);\r\n\r\n    const fetchOptions = {\r\n        method: \"PUT\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Accept\": \"application/json\",\r\n        },\r\n        body: formDataJsonString,\r\n    };\r\n\r\n    const response = await fetch(url, fetchOptions);\r\n\r\n\r\n    if (!response.ok) {\r\n        const errorMessage = response.text();\r\n        throw new Error(errorMessage);\r\n    }\r\n\r\n    return response.json();\r\n}\r\n\r\n\r\n// Supprimer une personne de la liste\r\nconst deletePerson = async (personID) => {\r\n    const myInit = {\r\n        method: 'DELETE'\r\n    };\r\n    console.log(personID);\r\n    const response = await fetch(`person/${personID}`, myInit);\r\n\r\n    return response;\r\n};\r\n\r\n// Supprimer toutes les personnes de la liste\r\nconst deleteAllPerson = async () => {\r\n    const myInit = {\r\n        method: 'DELETE'\r\n    };\r\n    const response = await fetch('person/', myInit);\r\n\r\n    return response;\r\n}\r\n\r\nexport { getAllPerson, postFormDataAsJson, putFormDataAsJson, deletePerson, deleteAllPerson }"]},"metadata":{},"sourceType":"module"}