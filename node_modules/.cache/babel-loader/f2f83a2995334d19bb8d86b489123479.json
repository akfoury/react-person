{"ast":null,"code":"// Récupérer toutes les personnes de la base de données\nconst getAllPerson = async () => {\n  const myInit = {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  await fetch('/person', myInit).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n\n    throw response;\n  });\n}; // Récupérer une ou toutes les personnes de la base de données\n\n\nconst postFormDataAsJson = async ({\n  url,\n  formData\n}) => {\n  const plainFormData = Object.fromEntries(formData.entries());\n  const formDataJsonString = JSON.stringify(plainFormData);\n  const fetchOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Accept\": \"application/json\"\n    },\n    body: formDataJsonString\n  };\n  const response = await fetch(url, fetchOptions);\n\n  if (!response.ok) {\n    const errorMessage = await response.text();\n    throw new Error(errorMessage);\n  }\n\n  return response.json();\n}; // Mettre à jour une personne\n\n\nconst putFormDataAsJson = async ({\n  url,\n  formData\n}) => {\n  const plainFormData = Object.fromEntries(formData.entries());\n  const formDataJsonString = JSON.stringify(plainFormData);\n  const fetchOptions = {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Accept\": \"application/json\"\n    },\n    body: formDataJsonString\n  };\n  const response = await fetch(url, fetchOptions);\n\n  if (!response.ok) {\n    const errorMessage = await response.text();\n    throw new Error(errorMessage);\n  }\n\n  return response.json();\n}; // Supprimer une personne de la liste\n\n\nconst deletePerson = async e => {\n  // Supprimer l'élément dans la base de données\n  const personID = $($(e.currentTarget).parents()[3]).find('.personID').text();\n  const myInit = {\n    method: 'DELETE'\n  };\n  await fetch(`person/${personID}`, myInit);\n};\n\nexport { getAllPerson, postFormDataAsJson, putFormDataAsJson, deletePerson };","map":{"version":3,"sources":["C:/Users/Alex/Documents/react-person/src/api/PersonAPI.js"],"names":["getAllPerson","myInit","method","headers","fetch","then","response","ok","json","postFormDataAsJson","url","formData","plainFormData","Object","fromEntries","entries","formDataJsonString","JSON","stringify","fetchOptions","body","errorMessage","text","Error","putFormDataAsJson","deletePerson","e","personID","$","currentTarget","parents","find"],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAG,YAAW;AAC5B,QAAMC,MAAM,GAAG;AACXC,IAAAA,MAAM,EAAE,KADG;AAEXC,IAAAA,OAAO,EAAE;AACT,sBAAgB;AADP;AAFE,GAAf;AAOA,QAAMC,KAAK,CAAC,SAAD,EAAYH,MAAZ,CAAL,CACDI,IADC,CACIC,QAAQ,IAAI;AACd,QAAGA,QAAQ,CAACC,EAAZ,EAAgB;AACZ,aAAOD,QAAQ,CAACE,IAAT,EAAP;AACH;;AACD,UAAMF,QAAN;AACH,GANC,CAAN;AAOH,CAfD,C,CAiBA;;;AACA,MAAMG,kBAAkB,GAAG,OAAO;AAAEC,EAAAA,GAAF;AAAOC,EAAAA;AAAP,CAAP,KAA6B;AACpD,QAAMC,aAAa,GAAGC,MAAM,CAACC,WAAP,CAAmBH,QAAQ,CAACI,OAAT,EAAnB,CAAtB;AACA,QAAMC,kBAAkB,GAAGC,IAAI,CAACC,SAAL,CAAeN,aAAf,CAA3B;AAEA,QAAMO,YAAY,GAAG;AACjBjB,IAAAA,MAAM,EAAE,MADS;AAEjBC,IAAAA,OAAO,EAAE;AACL,sBAAgB,kBADX;AAEL,gBAAU;AAFL,KAFQ;AAMjBiB,IAAAA,IAAI,EAAEJ;AANW,GAArB;AASA,QAAMV,QAAQ,GAAG,MAAMF,KAAK,CAACM,GAAD,EAAMS,YAAN,CAA5B;;AAEA,MAAI,CAACb,QAAQ,CAACC,EAAd,EAAkB;AACd,UAAMc,YAAY,GAAG,MAAMf,QAAQ,CAACgB,IAAT,EAA3B;AACA,UAAM,IAAIC,KAAJ,CAAUF,YAAV,CAAN;AACH;;AAED,SAAOf,QAAQ,CAACE,IAAT,EAAP;AACH,CArBD,C,CAuBA;;;AACA,MAAMgB,iBAAiB,GAAG,OAAO;AAAEd,EAAAA,GAAF;AAAOC,EAAAA;AAAP,CAAP,KAA6B;AACnD,QAAMC,aAAa,GAAGC,MAAM,CAACC,WAAP,CAAmBH,QAAQ,CAACI,OAAT,EAAnB,CAAtB;AACA,QAAMC,kBAAkB,GAAGC,IAAI,CAACC,SAAL,CAAeN,aAAf,CAA3B;AAEA,QAAMO,YAAY,GAAG;AACjBjB,IAAAA,MAAM,EAAE,KADS;AAEjBC,IAAAA,OAAO,EAAE;AACL,sBAAgB,kBADX;AAEL,gBAAU;AAFL,KAFQ;AAMjBiB,IAAAA,IAAI,EAAEJ;AANW,GAArB;AASA,QAAMV,QAAQ,GAAG,MAAMF,KAAK,CAACM,GAAD,EAAMS,YAAN,CAA5B;;AAEA,MAAI,CAACb,QAAQ,CAACC,EAAd,EAAkB;AACd,UAAMc,YAAY,GAAG,MAAMf,QAAQ,CAACgB,IAAT,EAA3B;AACA,UAAM,IAAIC,KAAJ,CAAUF,YAAV,CAAN;AACH;;AAED,SAAOf,QAAQ,CAACE,IAAT,EAAP;AACH,CArBD,C,CAwBA;;;AACA,MAAMiB,YAAY,GAAG,MAAOC,CAAP,IAAa;AAC9B;AACA,QAAMC,QAAQ,GAAGC,CAAC,CAACA,CAAC,CAACF,CAAC,CAACG,aAAH,CAAD,CAAmBC,OAAnB,GAA6B,CAA7B,CAAD,CAAD,CAAmCC,IAAnC,CAAwC,WAAxC,EAAqDT,IAArD,EAAjB;AACA,QAAMrB,MAAM,GAAG;AACXC,IAAAA,MAAM,EAAE;AADG,GAAf;AAGA,QAAME,KAAK,CAAE,UAASuB,QAAS,EAApB,EAAuB1B,MAAvB,CAAX;AACH,CAPD;;AASA,SAASD,YAAT,EAAuBS,kBAAvB,EAA2Ce,iBAA3C,EAA8DC,YAA9D","sourcesContent":["// Récupérer toutes les personnes de la base de données\r\nconst getAllPerson = async() => {\r\n    const myInit = {\r\n        method: 'GET',\r\n        headers: {\r\n        'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    await fetch('/person', myInit)\r\n        .then(response => {\r\n            if(response.ok) {\r\n                return response.json();\r\n            }\r\n            throw response;\r\n        });\r\n}\r\n\r\n// Récupérer une ou toutes les personnes de la base de données\r\nconst postFormDataAsJson = async ({ url, formData }) => {\r\n    const plainFormData = Object.fromEntries(formData.entries());\r\n    const formDataJsonString = JSON.stringify(plainFormData);\r\n\r\n    const fetchOptions = {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Accept\": \"application/json\",\r\n        },\r\n        body: formDataJsonString,\r\n    };\r\n\r\n    const response = await fetch(url, fetchOptions);\r\n\r\n    if (!response.ok) {\r\n        const errorMessage = await response.text();\r\n        throw new Error(errorMessage);\r\n    }\r\n\r\n    return response.json();\r\n}\r\n\r\n// Mettre à jour une personne\r\nconst putFormDataAsJson = async ({ url, formData }) => {\r\n    const plainFormData = Object.fromEntries(formData.entries());\r\n    const formDataJsonString = JSON.stringify(plainFormData);\r\n\r\n    const fetchOptions = {\r\n        method: \"PUT\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Accept\": \"application/json\",\r\n        },\r\n        body: formDataJsonString,\r\n    };\r\n\r\n    const response = await fetch(url, fetchOptions);\r\n\r\n    if (!response.ok) {\r\n        const errorMessage = await response.text();\r\n        throw new Error(errorMessage);\r\n    }\r\n\r\n    return response.json();\r\n}\r\n\r\n\r\n// Supprimer une personne de la liste\r\nconst deletePerson = async (e) => {\r\n    // Supprimer l'élément dans la base de données\r\n    const personID = $($(e.currentTarget).parents()[3]).find('.personID').text();\r\n    const myInit = {\r\n        method: 'DELETE',\r\n    };\r\n    await fetch(`person/${personID}`, myInit);\r\n};\r\n\r\nexport { getAllPerson, postFormDataAsJson, putFormDataAsJson, deletePerson }"]},"metadata":{},"sourceType":"module"}