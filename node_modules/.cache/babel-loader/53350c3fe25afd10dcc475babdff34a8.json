{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/Alex/Documents/react-person/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/Alex/Documents/react-person/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import $ from\"jquery\";// Récupérer toutes les personnes de la base de données\nvar getAllPerson=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var myInit;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:myInit={method:'GET',headers:{'Content-Type':'application/json'}};_context.next=3;return fetch('/person',myInit).then(function(response){if(response.ok){return response.json();}throw response;});case 3:return _context.abrupt(\"return\",_context.sent);case 4:case\"end\":return _context.stop();}}},_callee);}));return function getAllPerson(){return _ref.apply(this,arguments);};}();// Récupérer une ou toutes les personnes de la base de données\nvar postFormDataAsJson=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref2){var formData,url,plainFormData,formDataJsonString,fetchOptions,response,errorMessage;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:formData=_ref2.formData,url=_ref2.url;plainFormData=Object.fromEntries(formData.entries());formDataJsonString=JSON.stringify(plainFormData);fetchOptions={method:\"POST\",headers:{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"},body:formDataJsonString};_context2.next=6;return fetch(url,fetchOptions);case 6:response=_context2.sent;if(response.ok){_context2.next=12;break;}_context2.next=10;return response.text();case 10:errorMessage=_context2.sent;throw new Error(errorMessage);case 12:return _context2.abrupt(\"return\",response.json());case 13:case\"end\":return _context2.stop();}}},_callee2);}));return function postFormDataAsJson(_x){return _ref3.apply(this,arguments);};}();// Mettre à jour une personne\nvar putFormDataAsJson=/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_ref4){var formData,url,plainFormData,formDataJsonString,fetchOptions,response,errorMessage;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:formData=_ref4.formData,url=_ref4.url;console.log(formData);plainFormData=Object.fromEntries(formData.entries());formDataJsonString=JSON.stringify(plainFormData);fetchOptions={method:\"PUT\",headers:{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"},body:formDataJsonString};_context3.next=7;return fetch(url,fetchOptions);case 7:response=_context3.sent;if(response.ok){_context3.next=13;break;}_context3.next=11;return response.text();case 11:errorMessage=_context3.sent;throw new Error(errorMessage);case 13:return _context3.abrupt(\"return\",response.json());case 14:case\"end\":return _context3.stop();}}},_callee3);}));return function putFormDataAsJson(_x2){return _ref5.apply(this,arguments);};}();// Supprimer une personne de la liste\nvar deletePerson=/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(e,personID){var myInit;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:myInit={method:'DELETE'};_context4.next=3;return fetch(\"person/\".concat(personID),myInit);case 3:return _context4.abrupt(\"return\",_context4.sent);case 4:case\"end\":return _context4.stop();}}},_callee4);}));return function deletePerson(_x3,_x4){return _ref6.apply(this,arguments);};}();export{getAllPerson,postFormDataAsJson,putFormDataAsJson,deletePerson};","map":{"version":3,"sources":["C:/Users/Alex/Documents/react-person/src/api/PersonAPI.js"],"names":["$","getAllPerson","myInit","method","headers","fetch","then","response","ok","json","postFormDataAsJson","formData","url","plainFormData","Object","fromEntries","entries","formDataJsonString","JSON","stringify","fetchOptions","body","text","errorMessage","Error","putFormDataAsJson","console","log","deletePerson","e","personID"],"mappings":"mTAAA,MAAOA,CAAAA,CAAP,KAAc,QAAd,CAEA;AACA,GAAMC,CAAAA,YAAY,0FAAG,8IACXC,MADW,CACF,CACXC,MAAM,CAAE,KADG,CAEXC,OAAO,CAAE,CACT,eAAgB,kBADP,CAFE,CADE,uBAQJC,CAAAA,KAAK,CAAC,SAAD,CAAYH,MAAZ,CAAL,CACRI,IADQ,CACH,SAAAC,QAAQ,CAAI,CACd,GAAGA,QAAQ,CAACC,EAAZ,CAAgB,CACZ,MAAOD,CAAAA,QAAQ,CAACE,IAAT,EAAP,CACH,CACD,KAAMF,CAAAA,QAAN,CACH,CANQ,CARI,6GAAH,kBAAZN,CAAAA,YAAY,0CAAlB,CAiBA;AACA,GAAMS,CAAAA,kBAAkB,2FAAG,kOAASC,QAAT,OAASA,QAAT,CAAmBC,GAAnB,OAAmBA,GAAnB,CACjBC,aADiB,CACDC,MAAM,CAACC,WAAP,CAAmBJ,QAAQ,CAACK,OAAT,EAAnB,CADC,CAEjBC,kBAFiB,CAEIC,IAAI,CAACC,SAAL,CAAeN,aAAf,CAFJ,CAIjBO,YAJiB,CAIF,CACjBjB,MAAM,CAAE,MADS,CAEjBC,OAAO,CAAE,CACL,eAAgB,kBADX,CAEL,SAAU,kBAFL,CAFQ,CAMjBiB,IAAI,CAAEJ,kBANW,CAJE,wBAaAZ,CAAAA,KAAK,CAACO,GAAD,CAAMQ,YAAN,CAbL,QAajBb,QAbiB,mBAelBA,QAAQ,CAACC,EAfS,mDAgBQD,CAAAA,QAAQ,CAACe,IAAT,EAhBR,SAgBbC,YAhBa,qBAiBb,IAAIC,CAAAA,KAAJ,CAAUD,YAAV,CAjBa,0CAoBhBhB,QAAQ,CAACE,IAAT,EApBgB,2DAAH,kBAAlBC,CAAAA,kBAAkB,6CAAxB,CAuBA;AACA,GAAMe,CAAAA,iBAAiB,2FAAG,kOAASd,QAAT,OAASA,QAAT,CAAmBC,GAAnB,OAAmBA,GAAnB,CACtBc,OAAO,CAACC,GAAR,CAAYhB,QAAZ,EACME,aAFgB,CAEAC,MAAM,CAACC,WAAP,CAAmBJ,QAAQ,CAACK,OAAT,EAAnB,CAFA,CAGhBC,kBAHgB,CAGKC,IAAI,CAACC,SAAL,CAAeN,aAAf,CAHL,CAKhBO,YALgB,CAKD,CACjBjB,MAAM,CAAE,KADS,CAEjBC,OAAO,CAAE,CACL,eAAgB,kBADX,CAEL,SAAU,kBAFL,CAFQ,CAMjBiB,IAAI,CAAEJ,kBANW,CALC,wBAcCZ,CAAAA,KAAK,CAACO,GAAD,CAAMQ,YAAN,CAdN,QAchBb,QAdgB,mBAgBjBA,QAAQ,CAACC,EAhBQ,mDAiBSD,CAAAA,QAAQ,CAACe,IAAT,EAjBT,SAiBZC,YAjBY,qBAkBZ,IAAIC,CAAAA,KAAJ,CAAUD,YAAV,CAlBY,0CAqBfhB,QAAQ,CAACE,IAAT,EArBe,2DAAH,kBAAjBgB,CAAAA,iBAAiB,8CAAvB,CAyBA;AACA,GAAMG,CAAAA,YAAY,2FAAG,kBAAOC,CAAP,CAAUC,QAAV,iIACX5B,MADW,CACF,CACXC,MAAM,CAAE,QADG,CADE,wBAIJE,CAAAA,KAAK,kBAAWyB,QAAX,EAAuB5B,MAAvB,CAJD,iHAAH,kBAAZ0B,CAAAA,YAAY,kDAAlB,CAOA,OAAS3B,YAAT,CAAuBS,kBAAvB,CAA2Ce,iBAA3C,CAA8DG,YAA9D","sourcesContent":["import $ from \"jquery\";\r\n\r\n// Récupérer toutes les personnes de la base de données\r\nconst getAllPerson = async () => {\r\n    const myInit = {\r\n        method: 'GET',\r\n        headers: {\r\n        'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    return await fetch('/person', myInit)\r\n        .then(response => {\r\n            if(response.ok) {\r\n                return response.json();\r\n            }\r\n            throw response;\r\n        });\r\n}\r\n\r\n// Récupérer une ou toutes les personnes de la base de données\r\nconst postFormDataAsJson = async ({ formData, url }) => {\r\n    const plainFormData = Object.fromEntries(formData.entries());\r\n    const formDataJsonString = JSON.stringify(plainFormData);\r\n\r\n    const fetchOptions = {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Accept\": \"application/json\",\r\n        },\r\n        body: formDataJsonString,\r\n    };\r\n\r\n    const response = await fetch(url, fetchOptions);\r\n\r\n    if (!response.ok) {\r\n        const errorMessage = await response.text();\r\n        throw new Error(errorMessage);\r\n    }\r\n\r\n    return response.json();\r\n}\r\n\r\n// Mettre à jour une personne\r\nconst putFormDataAsJson = async ({ formData, url }) => {\r\n    console.log(formData);\r\n    const plainFormData = Object.fromEntries(formData.entries());\r\n    const formDataJsonString = JSON.stringify(plainFormData);\r\n\r\n    const fetchOptions = {\r\n        method: \"PUT\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Accept\": \"application/json\",\r\n        },\r\n        body: formDataJsonString,\r\n    };\r\n\r\n    const response = await fetch(url, fetchOptions);\r\n\r\n    if (!response.ok) {\r\n        const errorMessage = await response.text();\r\n        throw new Error(errorMessage);\r\n    }\r\n\r\n    return response.json();\r\n}\r\n\r\n\r\n// Supprimer une personne de la liste\r\nconst deletePerson = async (e, personID) => {\r\n    const myInit = {\r\n        method: 'DELETE',\r\n    };\r\n    return await fetch(`person/${personID}`, myInit);\r\n};\r\n\r\nexport { getAllPerson, postFormDataAsJson, putFormDataAsJson, deletePerson }"]},"metadata":{},"sourceType":"module"}