{"version":3,"sources":["api/PersonAPI.js","utils/FormData.js","actions/actions-types.js","actions/index.js","components/PersonForm/PersonForm.js","components/FilterInput/FilterInput.js","utils/ListFilter.js","components/FilterInputList/FilterInputList.js","components/PersonList/PersonList.js","App.js","reportWebVitals.js","reducers/PersonListReducer.js","reducers/FormDataReducer.js","reducers/index.js","store.js","index.js"],"names":["getAllPerson","pageNum","numRows","a","myInit","method","headers","fetch","then","response","ok","json","postFormDataAsJson","formData","url","plainFormData","Object","fromEntries","entries","formDataJsonString","JSON","stringify","fetchOptions","body","text","errorMessage","Error","putFormDataAsJson","deletePerson","personID","console","log","deleteAllPerson","convertFormDataToObject","e","form","currentTarget","action","FormData","SET_PERSONLIST","ADD_PERSONLIST","DELETE_PERSONLIST","UPDATE_PERSONLIST","SET_FORMDATA","setPersonList","list","dispatch","type","payload","initialFormData","id","firstname","lastname","address","isActive","mapDispatchToProps","addPersonList","person","setFormData","name","value","connect","state","stateUpdate","target","handleFormSubmit","preventDefault","responseData","visibility","error","className","onSubmit","placeholder","onChange","required","Button","variant","color","endIcon","FilterInput","filterOptions","optionName","handleFormFilterInput","defaultValue","initialFilteredPersonList","personList","useState","setFilterOptions","prevState","useEffect","filteredID","counter","map","item","val","String","toLowerCase","startsWith","numberOfFieldsFilled","values","filter","Boolean","length","keys","getListOfFilteredID","obj","includes","ListItem","ContainerComponent","ListItemText","disableTypography","primary","ListItemSecondaryAction","IconButton","edge","onClick","stopPropagation","ClearAll","style","fill","fontSize","updatePersonList","index","deletePersonList","editedRowIndex","setEditedRowIndex","pagination","setPagination","setNumRows","toggleIsEditing","dataset","idedit","editableIndex","findIndex","parseInt","handleDelete","iddelete","removeIndex","EditableRow","Fragment","display","justifyContent","border","width","margin","querySelector","idsend","updateIndex","_","incrementPagination","direction","getAttribute","document","querySelectorAll","forEach","elem","parentElement","data","Grid","backgroundColor","Send","xs","md","List","Typography","Chip","fontWeight","label","Edit","Close","ButtonGroup","ArrowBack","size","test","ArrowForward","FormControl","Select","MenuItem","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","rootReducer","combineReducers","deleteDeepClone","updateDeepClone","slice","composedEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.520c12d6.chunk.js","sourcesContent":["// Récupérer toutes les personnes de la base de données\r\nconst getAllPerson = async (pageNum, numRows) => {\r\n    const myInit = {\r\n        method: 'GET',\r\n        headers: {\r\n        'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    return fetch(`/person/${pageNum}/${numRows}`, myInit)\r\n        .then(response => {\r\n            if(response.ok) {\r\n                return response.json();\r\n            }\r\n            throw response;\r\n        });\r\n}\r\n\r\n\r\n// Ajouter une personne à la base de données\r\nconst postFormDataAsJson = async ({ formData, url }) => {\r\n    const plainFormData = Object.fromEntries(formData.entries());\r\n    const formDataJsonString = JSON.stringify(plainFormData);\r\n\r\n    const fetchOptions = {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Accept\": \"application/json\",\r\n        },\r\n        body: formDataJsonString,\r\n    };\r\n\r\n    const response = await fetch(url, fetchOptions);\r\n\r\n    if (!response.ok) {\r\n        const errorMessage = await response.text();\r\n        throw new Error(errorMessage);\r\n    }\r\n\r\n    return response.json();\r\n}\r\n\r\n// Mettre à jour une personne\r\nconst putFormDataAsJson = async ({ formData, url }) => {\r\n    const plainFormData = Object.fromEntries(formData.entries());\r\n    const formDataJsonString = JSON.stringify(plainFormData);\r\n\r\n    const fetchOptions = {\r\n        method: \"PUT\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Accept\": \"application/json\",\r\n        },\r\n        body: formDataJsonString,\r\n    };\r\n\r\n    const response = await fetch(url, fetchOptions);\r\n\r\n\r\n    if (!response.ok) {\r\n        const errorMessage = response.text();\r\n        throw new Error(errorMessage);\r\n    }\r\n\r\n    return response.json();\r\n}\r\n\r\n\r\n// Supprimer une personne de la liste\r\nconst deletePerson = async (personID) => {\r\n    const myInit = {\r\n        method: 'DELETE'\r\n    };\r\n    console.log(personID);\r\n    const response = await fetch(`person/${personID}`, myInit);\r\n\r\n    return response;\r\n};\r\n\r\n// Supprimer toutes les personnes de la liste\r\nconst deleteAllPerson = async () => {\r\n    const myInit = {\r\n        method: 'DELETE'\r\n    };\r\n    const response = await fetch('person/', myInit);\r\n\r\n    return response;\r\n}\r\n\r\nexport { getAllPerson, postFormDataAsJson, putFormDataAsJson, deletePerson, deleteAllPerson }","// Convertir les données du formulaire sous la forme d'un objet js\r\nexport const convertFormDataToObject = (e) => {\r\n    const form = e.currentTarget;\r\n    const url = form.action;\r\n    const formData = new FormData(form);\r\n\r\n    return {\r\n        formData,\r\n        url\r\n    }\r\n}","export const SET_PERSONLIST = \"SET_PERSONLIST\";\r\nexport const ADD_PERSONLIST = \"ADD_PERSONLIST\";\r\nexport const DELETE_PERSONLIST = \"DELETE_PERSONLIST\";\r\nexport const UPDATE_PERSONLIST = \"UPDATE_PERSONLIST\";\r\nexport const SET_FORMDATA = \"SET_FORMDATA\";\r\n\r\n","import { SET_PERSONLIST, ADD_PERSONLIST, DELETE_PERSONLIST, UPDATE_PERSONLIST, SET_FORMDATA } from \"./actions-types\";\r\n\r\nexport const setPersonList = list => dispatch => {\r\n    dispatch({type: SET_PERSONLIST, payload: list});\r\n}\r\n\r\nexport const addPersonList = person => dispatch => {\r\n    dispatch({type: ADD_PERSONLIST, payload: person}); \r\n}\r\n\r\nexport const deletePersonList = index => dispatch => {\r\n    dispatch({type: DELETE_PERSONLIST, payload: index});\r\n}\r\n\r\nexport const updatePersonList = (index, responseData) => dispatch => {\r\n    dispatch({type: UPDATE_PERSONLIST, payload: [index, responseData]});\r\n}\r\n\r\nexport const setFormData = (name, value) => dispatch => {\r\n    dispatch({type: SET_FORMDATA, payload: [name, value]});\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport './PersonForm.css';\r\nimport Button from '@mui/material/Button';\r\nimport AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';\r\nimport { postFormDataAsJson } from '../../api/PersonAPI';\r\nimport { convertFormDataToObject } from '../../utils/FormData';\r\nimport { addPersonList, setFormData } from \"../../actions\";\r\nimport { connect } from \"react-redux\";\r\n\r\n// Objet de réinitialisation du formulaire d'ajout\r\nconst initialFormData = {\r\n    id: '',\r\n    firstname: '',\r\n    lastname: '',\r\n    address: '',\r\n    isActive: '1'\r\n}\r\n\r\nfunction PersonForm( { addPersonList, formData, setFormData }) {\r\n    // Mise à jour du formulaire\r\n    const stateUpdate = target => {\r\n        setFormData(target.name, target.value);\r\n    }\r\n    \r\n    // Gérer le formulaire de l'ajout d'une personne\r\n    const handleFormSubmit = async (e) => {\r\n        e.preventDefault();\r\n    \r\n        try {\r\n            const { formData, url } = convertFormDataToObject(e);\r\n            let responseData = await postFormDataAsJson({ formData, url });\r\n\r\n            responseData = {...responseData, visibility: true};\r\n            addPersonList(responseData);\r\n            setFormData(initialFormData);\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form className=\"personForm\" action=\"/person\" onSubmit={handleFormSubmit}>\r\n            <h1>Ajouter une Personne</h1>\r\n            <div className=\"personForm__item\">\r\n                <label>Prénom</label>\r\n                <input type=\"text\" placeholder=\"Votre prénom\" value={formData.firstname} name=\"firstname\" onChange={e => stateUpdate(e.target)} required />\r\n            </div>\r\n            <div className=\"personForm__item\">\r\n                <label>Nom</label>\r\n                <input type=\"text\" placeholder=\"Votre nom de famille\" value={formData.lastname} name=\"lastname\" onChange={e => stateUpdate(e.target)} required />\r\n            </div>\r\n            <div className=\"personForm__item\">\r\n                <label>Adresse Email</label>\r\n                <input type=\"email\" placeholder=\"-----@-----.---\" value={formData.address} name=\"address\" onChange={e => stateUpdate(e.target)} required />\r\n            </div>\r\n            <div className=\"personForm__item\">\r\n                <label>Actif</label>\r\n                <select onChange={e => stateUpdate(e.target)} value={formData.isActive} name=\"isActive\">\r\n                    <option value=\"1\">Oui</option>\r\n                    <option value=\"0\">Non</option>\r\n                </select>\r\n            </div>\r\n            <div className=\"personForm__item\">\r\n                <Button \r\n                    variant=\"contained\" \r\n                    color=\"primary\" \r\n                    type=\"submit\"\r\n                    value=\"Ajouter Personne\"\r\n                    endIcon={<AddCircleOutlineIcon />}\r\n                >\r\n                    Ajouter Personne\r\n                </Button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        formData: state.formData.formData\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    addPersonList,\r\n    setFormData\r\n  }\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(PersonForm);","import React from 'react';\r\nimport './FilterInput.css';\r\n\r\nexport default function FilterInput({ filterOptions, optionName, handleFormFilterInput }) {\r\n    return (\r\n        <div className=\"filterInput\">\r\n            <input\r\n                className=\"MuiTypography-root MuiTypography-h7 MuiTypography-displayInline columnFilter\"\r\n                defaultValue={filterOptions[optionName]}\r\n                onChange={handleFormFilterInput}\r\n                name={optionName}\r\n                placeholder=\"Filtrer\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","// Algorithme de filtrage de la liste\r\nexport const getListOfFilteredID = (filterOptions, list) => {\r\n    let counter = {}\r\n    list.map(item => counter[item.id] = 0);\r\n    list.map(item => {\r\n        Object.entries(item).map(val => {\r\n            if (String(val[1]).toLowerCase().startsWith(String(filterOptions[val[0]]).toLowerCase()) && String(filterOptions[val[0]]) != '') {\r\n                counter[item[\"id\"]] += 1;\r\n            }\r\n        });  \r\n    });\r\n    const numberOfFieldsFilled = Object.values(filterOptions).filter(Boolean).length;\r\n    counter = Object.entries(counter).filter(val => val[1] === numberOfFieldsFilled);\r\n    counter = Object.fromEntries(counter);\r\n    const idFiltered = Object.keys(counter);\r\n\r\n    return idFiltered;\r\n};","import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport FilterInput from '../FilterInput/FilterInput';\r\nimport { getListOfFilteredID } from '../../utils/ListFilter';\r\nimport { \r\n    deleteAllPerson \r\n} from '../../api/PersonAPI';\r\nimport { setPersonList } from \"../../actions\";\r\nimport { ClearAll } from '@mui/icons-material';\r\nimport {\r\n    ListItem,\r\n    ListItemSecondaryAction,\r\n    ListItemText,\r\n    IconButton,\r\n} from '@mui/material';\r\n\r\n// Initialisation des valeurs de filtres\r\nconst initialFilteredPersonList = {\r\n    id: '',\r\n    firstname: '',\r\n    lastname: '',\r\n    address: '',\r\n    isActive: ''\r\n}\r\n\r\nfunction FilterInputList({ personList, setPersonList }) {\r\n    const [filterOptions, setFilterOptions]  = useState(initialFilteredPersonList);\r\n\r\n    // Gestion du state stockant les valeurs de filtrage\r\n    const handleFormFilterInput = (e) => {\r\n        const { value, name } = e.target;\r\n        setFilterOptions(prevState => {\r\n            return {...prevState, [name]: value}\r\n        });\r\n    }\r\n\r\n    // Suppression de toutes les lignes\r\n    const handleDeleteAll = (e) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        deleteAllPerson().then(() => {\r\n            setPersonList([]);\r\n        });\r\n    }\r\n\r\n    // Appel de l'algorithme à chaque fois qu'une valeur de filtrage change\r\n    useEffect(() => {\r\n        const filteredID = getListOfFilteredID(filterOptions, personList);\r\n        if (filteredID.length != 0) {\r\n            setPersonList(personList.map(obj => filteredID.includes(String(obj.id)) ? ({...obj, visibility: true}) : ({...obj, visibility: false})));\r\n        }\r\n    }, [filterOptions]);\r\n\r\n    return (\r\n        <form className=\"filterForm\">\r\n            <ListItem className='list-item filters' ContainerComponent=\"div\">\r\n                <ListItemText\r\n                    disableTypography\r\n                    primary={<FilterInput filterOptions={filterOptions} optionName=\"id\" handleFormFilterInput={handleFormFilterInput} />}\r\n                    className='list-item-text'\r\n                />\r\n                <ListItemText\r\n                    disableTypography\r\n                    primary={<FilterInput filterOptions={filterOptions} optionName=\"firstname\" handleFormFilterInput={handleFormFilterInput} />}\r\n                    className='list-item-text'\r\n                />\r\n                <ListItemText\r\n                    disableTypography\r\n                    primary={<FilterInput filterOptions={filterOptions} optionName=\"lastname\" handleFormFilterInput={handleFormFilterInput} />}\r\n                    className='list-item-text'\r\n                />\r\n                <ListItemText\r\n                    disableTypography\r\n                    primary={<FilterInput filterOptions={filterOptions} optionName=\"address\" handleFormFilterInput={handleFormFilterInput} />}\r\n                    className='list-item-text'\r\n                />\r\n                <ListItemText\r\n                    disableTypography\r\n                    primary={<FilterInput filterOptions={filterOptions} optionName=\"isActive\" handleFormFilterInput={handleFormFilterInput} />}\r\n                    className='list-item-text'\r\n                />\r\n                <ListItemSecondaryAction>\r\n                    <IconButton edge=\"end\" aria-label=\"deleteall\" onClick={handleDeleteAll}>\r\n                        <ClearAll\r\n                            style={{fill: \"#008080\"}} \r\n                            fontSize=\"large\"\r\n                        />\r\n                    </IconButton>\r\n                </ListItemSecondaryAction>\r\n            </ListItem>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        personList: state.personList.personList,\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    setPersonList,\r\n  }\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(FilterInputList);\r\n\r\n","import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport './PersonList.css';\r\nimport { convertFormDataToObject } from '../../utils/FormData';\r\nimport { connect } from \"react-redux\";\r\nimport { getAllPerson } from \"../../api/PersonAPI\";\r\nimport { \r\n    putFormDataAsJson, \r\n    deletePerson\r\n} from '../../api/PersonAPI';\r\nimport {\r\n    List,\r\n    ListItem,\r\n    ListItemSecondaryAction,\r\n    ListItemText,\r\n    IconButton,\r\n    Grid,\r\n    Typography,\r\n    Button,\r\n    ButtonGroup,\r\n    Chip,\r\n    Select,\r\n    MenuItem,\r\n    FormControl\r\n} from '@mui/material';\r\nimport {\r\n    Close,\r\n    Send,\r\n    Edit,\r\n    ArrowForward,\r\n    ArrowBack\r\n} from '@mui/icons-material';\r\nimport { setPersonList, deletePersonList, updatePersonList } from \"../../actions\";\r\nimport FilterInputList from \"../FilterInputList/FilterInputList\";\r\n\r\n\r\nfunction PersonList({ personList, setPersonList, deletePersonList, updatePersonList }) {\r\n    const [editedRowIndex, setEditedRowIndex] = useState(null);\r\n    const [pagination, setPagination] = useState(1);\r\n    const [numRows, setNumRows] = useState(20);\r\n\r\n    // permet de switcher sur le mode édition d'une ligne\r\n    const toggleIsEditing = (e) => {\r\n        const personID = e.currentTarget.dataset.idedit;\r\n        const editableIndex = personList.findIndex(item => parseInt(item.id) === parseInt(personID));\r\n        setEditedRowIndex(editableIndex);\r\n    }  \r\n    \r\n    // gestion du button delete\r\n    const handleDelete = async (e) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        // Récupérer l'id de la ligne\r\n        const personID = e.currentTarget.dataset.iddelete;\r\n        console.log(personID);\r\n\r\n        // Supprimer la personne\r\n        const responseData = await deletePerson(personID);\r\n\r\n        console.log(personList);\r\n\r\n        // Récuperer l'index de l'élément à supprimer\r\n        const removeIndex = personList.findIndex(item => parseInt(item.id) === parseInt(personID));\r\n        console.log(removeIndex);\r\n\r\n        // Mettre à jour le state\r\n        deletePersonList(removeIndex);\r\n    }\r\n\r\n    // Element React pour la modification d'une ligne\r\n    const EditableRow = ({ value, name, type }) => {\r\n        return (\r\n            <React.Fragment>\r\n            <div style={{ display: \"flex\", justifyContent: \"flex-start\"}}>\r\n                <input\r\n                    defaultValue={value}\r\n                    name={name}\r\n                    type={type}\r\n                    style={{border: '#008080 solid 0.5px', width: '100%', margin: '2px'}}\r\n                    required\r\n                />\r\n            </div>\r\n            </React.Fragment>\r\n        )\r\n    };\r\n\r\n    // Gérer le formulaire de la mise à jour d'une personne\r\n    const handleFormSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        // Récupérer les données du formulaire\r\n        const personID = e.currentTarget.querySelector('button[type=submit]').dataset.idsend;\r\n        const updateIndex = personList.findIndex(item => parseInt(item.id) === parseInt(personID));\r\n        console.log(updateIndex);\r\n        const url = `person/${personID}`;\r\n\r\n        try {\r\n            // Requête PUT\r\n            const { formData, _} = convertFormDataToObject(e);\r\n            let responseData = await putFormDataAsJson({ formData, url });\r\n\r\n            responseData = {...responseData, visibility: true};\r\n            // Mise à jour de la liste des utilisateurs\r\n            updatePersonList(updateIndex, responseData);\r\n\r\n            setEditedRowIndex(-1);\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    const incrementPagination = (e) => {\r\n        const direction = e.currentTarget.getAttribute('aria-label');\r\n\r\n        if (direction === \"left-pagination\") {\r\n            setPagination(prevState => prevState === 1 ? prevState : prevState - 1);\r\n        } else {\r\n            setPagination(prevState => prevState + 1);\r\n        }\r\n    }\r\n\r\n    const updatePagination = (e) => {\r\n        const re = /^[+]?\\d+([.]\\d+)?$/;\r\n    \r\n        // if value is not blank, then test the regex\r\n        if (e.target.value === '' || re.test(e.target.value)) {\r\n           setPagination(parseInt(e.target.value));\r\n        }\r\n    }\r\n\r\n    const updateNumRows = (e) => {\r\n        setNumRows(parseInt(e.target.value));\r\n    }\r\n\r\n    useEffect(() => {\r\n        document.querySelectorAll('.show').forEach((elem) => {\r\n            elem.parentElement.style.display = \"list-item\";\r\n        });\r\n\r\n        document.querySelectorAll('.hide').forEach((elem) => {\r\n            elem.parentElement.style.display = \"none\";\r\n        });\r\n    }, [personList]);\r\n\r\n    useEffect(() => {\r\n        getAllPerson(pagination, numRows)\r\n            .then(data => {\r\n                data = data.map(obj => ({...obj, visibility: true}));\r\n                setPersonList(data);\r\n            });\r\n    }, [pagination, numRows]);\r\n\r\n    console.log(personList);\r\n    console.log(numRows)\r\n\r\n    return (\r\n        <div className=\"personList\">\r\n        <Grid>\r\n            <ListItem className='list-item' style={{ backgroundColor: '#9AC2C980' }} ContainerComponent=\"div\">\r\n                <ListItemText\r\n                    disableTypography\r\n                    primary={<Button type=\"body2\">ID</Button>}\r\n                    className='list-item-text'\r\n                />\r\n                <ListItemText\r\n                    disableTypography\r\n                    primary={<Button type=\"body2\">Prénom</Button>}\r\n                    className='list-item-text'\r\n                />\r\n                <ListItemText\r\n                    disableTypography\r\n                    primary={<Button type=\"body2\">Nom</Button>}\r\n                    className='list-item-text'\r\n                />\r\n                <ListItemText\r\n                    disableTypography\r\n                    primary={<Button type=\"body2\">Adresse</Button>}\r\n                    className='list-item-text'\r\n                />\r\n                <ListItemText\r\n                    disableTypography\r\n                    primary={<Button type=\"body2\">Actif</Button>}\r\n                    className='list-item-text'\r\n                />\r\n                <ListItemSecondaryAction>\r\n                    <IconButton edge=\"end\" aria-label=\"delete\" type=\"submit\">\r\n                        <Send \r\n                            style={{display: \"none\"}} \r\n                        />\r\n                    </IconButton>\r\n                </ListItemSecondaryAction>\r\n                <ListItemSecondaryAction>\r\n                    <IconButton edge=\"end\" aria-label=\"delete\" type=\"submit\">\r\n                        <Send \r\n                            style={{display: \"none\"}} \r\n                        />\r\n                    </IconButton>\r\n                </ListItemSecondaryAction>\r\n            </ListItem>\r\n            <FilterInputList />\r\n        </Grid>\r\n        <Grid item xs={16} md={12} className=\"grid\">\r\n            <List className='list'>\r\n            {personList.length != 0 && personList.map((item, index) => (\r\n                index === editedRowIndex ? ( \r\n                    <form className=\"editForm\" onSubmit={handleFormSubmit}>\r\n                        <ListItem className='list-item'>\r\n                            <ListItemText\r\n                                disableTypography\r\n                                primary={<EditableRow value={item.id} name=\"id\" />}\r\n                                className='list-item-text personID'\r\n                            />\r\n                            <ListItemText\r\n                                disableTypography\r\n                                primary={<EditableRow value={item.firstname} name=\"firstname\" />}\r\n                                className='list-item-text'\r\n                            />\r\n                            <ListItemText\r\n                                disableTypography\r\n                                primary={<EditableRow value={item.lastname} name=\"lastname\" />}\r\n                                className='list-item-text'\r\n                            />\r\n                            <ListItemText\r\n                                disableTypography\r\n                                primary={<EditableRow value={item.address} name=\"address\" type=\"email\"/>}\r\n                                className='list-item-text'\r\n                            />\r\n                            <ListItemText\r\n                                disableTypography\r\n                                primary={<EditableRow value={item.isActive} name=\"isActive\" />}\r\n                                className='list-item-text'\r\n                            />\r\n                            <ListItemSecondaryAction>\r\n                                <IconButton edge=\"end\" aria-label=\"edit\" type=\"submit\" data-idsend={item.id}>\r\n                                    <Send \r\n                                        style={{fill: \"#008080\"}} \r\n                                    />\r\n                                </IconButton>\r\n                            </ListItemSecondaryAction>\r\n                        </ListItem>\r\n                    </form>\r\n                    ) : (\r\n                        <ListItem className={`list-item ${item.visibility ? \"show\": \"hide\"}`}>\r\n                            <ListItemText\r\n                            disableTypography\r\n                            primary={<Typography type=\"body2\">{item.id}</Typography>}\r\n                            className='list-item-text personID'\r\n                            />\r\n                            <ListItemText\r\n                            disableTypography\r\n                            primary={<Typography type=\"body2\" >{item.firstname}</Typography>}\r\n                            className='list-item-text'\r\n                            />\r\n                            <ListItemText\r\n                            disableTypography\r\n                            primary={<Typography type=\"body2\">{item.lastname}</Typography>}\r\n                            className='list-item-text'\r\n                            />\r\n                            <ListItemText\r\n                            disableTypography\r\n                            primary={<Typography type=\"body2\">{item.address}</Typography>}\r\n                            className='list-item-text'\r\n                            />\r\n                            <ListItemText\r\n                            disableTypography\r\n                            primary={parseInt(item.isActive) ? <Chip style={{backgroundColor: 'rgba(53, 219, 94, 0.8)', color: 'white', fontWeight: 700}} label=\"Actif\" /> : <Chip style={{backgroundColor: 'rgba(209, 42, 23, 0.8)', color: 'white', fontWeight: 700}} label=\"Inactif\" />}\r\n                            className='list-item-text'\r\n                            />\r\n                            <ListItemSecondaryAction>\r\n                                <IconButton edge=\"end\" aria-label=\"edit\" onClick={toggleIsEditing} data-idedit={item.id} >\r\n                                    <Edit \r\n                                        style={{fill: \"#008080\"}} \r\n                                    />\r\n                                </IconButton>\r\n                                <IconButton edge=\"end\" aria-label=\"delete\" onClick={handleDelete} data-iddelete={item.id}>\r\n                                    <Close \r\n                                        style={{fill: \"#008080\"}} \r\n                                    />\r\n                                </IconButton>\r\n                            </ListItemSecondaryAction>\r\n                        </ListItem>\r\n                    )\r\n                )\r\n            )}\r\n            </List>\r\n        </Grid>\r\n        <Grid>\r\n            <List>\r\n                <ListItem className=\"pagination-listitem\">\r\n                    <ButtonGroup>\r\n                        <IconButton edge=\"end\" id=\"left-pagination\" aria-label=\"left-pagination\" onClick={incrementPagination}>\r\n                            <ArrowBack \r\n                                style={{fill: \"#008080\"}} \r\n                            />\r\n                        </IconButton>\r\n                        <input type=\"text\" size=\"1\" value={pagination} onChange={updatePagination} id=\"input-pagination\"/>\r\n                        <IconButton edge=\"end\" id=\"right-pagination\" aria-label=\"right-pagination\" onClick={incrementPagination}>\r\n                            <ArrowForward \r\n                                style={{fill: \"#008080\"}} \r\n                            />\r\n                        </IconButton>\r\n                    </ButtonGroup>\r\n                    <FormControl className=\"pagination-select\">\r\n                        <Select defaultValue=\"20\" value={numRows} onChange={updateNumRows} label=\"Pagination\">\r\n                            <MenuItem value={20}>20</MenuItem>\r\n                            <MenuItem value={40}>40</MenuItem>\r\n                            <MenuItem value={60}>60</MenuItem>\r\n                            <MenuItem value={100}>100</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n                </ListItem>\r\n            </List>\r\n        </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        personList: state.personList.personList,\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    setPersonList,\r\n    updatePersonList,\r\n    deletePersonList\r\n  }\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(PersonList);\r\n  ","import './App.css';\nimport PersonForm from './components/PersonForm/PersonForm';\nimport PersonList from './components/PersonList/PersonList';\nimport { useEffect } from 'react';\nimport { getAllPerson } from \"../src/api/PersonAPI\";\nimport { connect } from \"react-redux\";\nimport { setPersonList } from './actions';\n\nfunction App({ setPersonList }) {\n  // Récupération de toutes les personnes au lancement de l'application\n  useEffect(() => {\n    getAllPerson(1, 20)\n      .then(data => {\n        data = data.map(obj => ({...obj, visibility: true}));\n        setPersonList(data);\n      });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <PersonForm />\n      <PersonList />\n    </div>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n  }\n}\n\nconst mapDispatchToProps = {\n  setPersonList\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { SET_PERSONLIST, ADD_PERSONLIST, DELETE_PERSONLIST, UPDATE_PERSONLIST } from \"../actions/actions-types\";\r\n\r\nconst initialState = {\r\n    personList: []\r\n}\r\n\r\nexport default function PersonListReducer(state = initialState, action) {\r\n    switch(action.type) {\r\n        case SET_PERSONLIST:\r\n            console.log(action.payload);\r\n            return {\r\n                ...state,\r\n                personList: [...action.payload]\r\n            }\r\n        case ADD_PERSONLIST:\r\n            return {\r\n                ...state,\r\n                personList: [action.payload, ...state.personList]\r\n            }\r\n        case DELETE_PERSONLIST:\r\n            const deleteDeepClone = [...state.personList];\r\n            return {\r\n                ...state,\r\n                personList: deleteDeepClone.filter((item, index) => index !== action.payload)\r\n            }\r\n        case UPDATE_PERSONLIST:\r\n            const updateDeepClone = [...state.personList];\r\n            return {\r\n                ...state,\r\n                personList: [...updateDeepClone.slice(0, action.payload[0]), action.payload[1], ...updateDeepClone.slice(action.payload[0] + 1)]\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { SET_FORMDATA } from \"../actions/actions-types\";\r\n\r\nconst initialFormData = {\r\n    id: '',\r\n    firstname: '',\r\n    lastname: '',\r\n    address: '',\r\n    isActive: '1'\r\n}\r\n\r\nconst initialState = {\r\n    formData: initialFormData\r\n}\r\n\r\nexport default function FormDataReducer(state = initialState, action) {\r\n    switch(action.type) {\r\n        case SET_FORMDATA:\r\n            return {\r\n                ...state,\r\n                formData: {...state.formData, [action.payload[0]]: action.payload[1]}\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from \"redux\";\r\nimport PersonListReducer from \"./PersonListReducer\";\r\nimport FormDataReducer from \"./FormDataReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    personList: PersonListReducer,\r\n    formData: FormDataReducer\r\n});\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst composedEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, {}, composedEnhancer(applyMiddleware(thunk)));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}