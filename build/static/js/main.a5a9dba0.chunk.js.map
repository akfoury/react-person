{"version":3,"sources":["api/PersonAPI.js","utils/FormData.js","components/PersonForm/PersonForm.js","components/PersonList/PersonList.js","utils/ListFilter.js","App.js","reportWebVitals.js","index.js"],"names":["getAllPerson","a","myInit","method","headers","fetch","then","response","ok","json","getAllPersonSorteredByColumn","colName","direction","postFormDataAsJson","formData","url","plainFormData","Object","fromEntries","entries","formDataJsonString","JSON","stringify","fetchOptions","body","text","errorMessage","Error","putFormDataAsJson","deletePerson","personID","convertFormDataToObject","e","form","currentTarget","action","FormData","PersonForm","setPersonList","setFormData","initialState","stateUpdate","target","prevState","name","value","handleFormSubmit","preventDefault","responseData","console","error","className","onSubmit","style","backgroundColor","paddingLeft","color","fontWeight","type","placeholder","firstname","onChange","required","lastname","address","isActive","Button","variant","borderRadius","endIcon","initialFilteredPersonList","id","initialSortPersonList","PersonList","personList","classes","useStyles","useState","editedRowIndex","setEditedRowIndex","filterOptions","setFilterOptions","filteredListPerson","setFilteredListPerson","sortColumnsStatus","setSortColumnsStatus","actualColumnSorted","setActualColumnSorted","handleFormFilterInput","toggleIsEditing","$","attr","includes","parents","find","editableIndex","findIndex","item","parseInt","EditableRow","lastRow","Fragment","display","justifyContent","width","defaultValue","border","margin","updateIndex","_","slice","sortColumn","col","log","val","useEffect","filteredID","list","counter","map","String","toLowerCase","startsWith","numberOfFieldsFilled","values","filter","Boolean","length","keys","getListOfFilteredID","index","data","height","renderTrackHorizontal","props","Grid","xs","md","List","ListItem","listItem","ListItemText","disableTypography","primary","onClick","listItemText","paddingRight","ListItemSecondaryAction","IconButton","edge","fill","Typography","stopPropagation","removeIndex","newArray","splice","makeStyles","theme","cursor","padding","button","spacing","breakpoints","down","minWidth","marginBottom","buttonText","Input","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a5a9dba0.chunk.js","sourcesContent":["// Récupérer toutes les personnes de la base de données\r\nconst getAllPerson = async () => {\r\n    const myInit = {\r\n        method: 'GET',\r\n        headers: {\r\n        'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    return await fetch('/person', myInit)\r\n        .then(response => {\r\n            if(response.ok) {\r\n                return response.json();\r\n            }\r\n            throw response;\r\n        });\r\n}\r\n\r\n// Récupérer toutes les personnes de la base de données triées selon une colonne\r\nconst getAllPersonSorteredByColumn = async (colName, direction) => {\r\n    const myInit = {\r\n        method: 'GET',\r\n    };\r\n    return await fetch(`person/${colName}/${direction}`, myInit)\r\n        .then(response => {\r\n            if(response.ok) {\r\n                return response.json();\r\n            }\r\n            throw response;\r\n        });\r\n};\r\n\r\n// Récupérer une ou toutes les personnes de la base de données\r\nconst postFormDataAsJson = async ({ formData, url }) => {\r\n    const plainFormData = Object.fromEntries(formData.entries());\r\n    const formDataJsonString = JSON.stringify(plainFormData);\r\n\r\n    const fetchOptions = {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Accept\": \"application/json\",\r\n        },\r\n        body: formDataJsonString,\r\n    };\r\n\r\n    const response = await fetch(url, fetchOptions);\r\n\r\n    if (!response.ok) {\r\n        const errorMessage = await response.text();\r\n        throw new Error(errorMessage);\r\n    }\r\n\r\n    return response.json();\r\n}\r\n\r\n// Mettre à jour une personne\r\nconst putFormDataAsJson = async ({ formData, url }) => {\r\n    const plainFormData = Object.fromEntries(formData.entries());\r\n    const formDataJsonString = JSON.stringify(plainFormData);\r\n\r\n    const fetchOptions = {\r\n        method: \"PUT\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Accept\": \"application/json\",\r\n        },\r\n        body: formDataJsonString,\r\n    };\r\n\r\n    const response = await fetch(url, fetchOptions);\r\n\r\n    if (!response.ok) {\r\n        const errorMessage = await response.text();\r\n        throw new Error(errorMessage);\r\n    }\r\n\r\n    return response.json();\r\n}\r\n\r\n\r\n// Supprimer une personne de la liste\r\nconst deletePerson = async (personID) => {\r\n    const myInit = {\r\n        method: 'DELETE',\r\n    };\r\n    return await fetch(`person/${personID}`, myInit);\r\n};\r\n\r\nexport { getAllPerson, postFormDataAsJson, putFormDataAsJson, deletePerson, getAllPersonSorteredByColumn }","// Convertir les données du formulaire sous la forme d'un objet js\r\nexport const convertFormDataToObject = (e) => {\r\n    const form = e.currentTarget;\r\n    const url = form.action;\r\n    const formData = new FormData(form);\r\n\r\n    return {\r\n        formData,\r\n        url\r\n    }\r\n}","import React from 'react';\r\nimport './PersonForm.css';\r\nimport Button from '@material-ui/core/Button';\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport { postFormDataAsJson } from '../../api/PersonAPI';\r\nimport { convertFormDataToObject } from '../../utils/FormData';\r\n\r\nexport default function PersonForm( { setPersonList, setFormData, formData, initialState }) {\r\n    // Mise à jour du formulaire\r\n    const stateUpdate = target => {\r\n        setFormData(prevState => {\r\n            return {...prevState, [target.name]: target.value};\r\n        });\r\n    }\r\n    \r\n    // Gérer le formulaire de l'ajout d'une personne\r\n    const handleFormSubmit = async (e) => {\r\n        e.preventDefault();\r\n    \r\n        try {\r\n            const { formData, url } = convertFormDataToObject(e);\r\n            const responseData = await postFormDataAsJson({ formData, url });\r\n            setPersonList(prevState => {\r\n                return [responseData, ...prevState];\r\n            });\r\n            setFormData(initialState);\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form className=\"personForm\" action=\"/person\" onSubmit={handleFormSubmit} style={{ backgroundColor: '#9AC2C9'}}>\r\n            <h1 style={{paddingLeft: '24px', color: '#008080', fontWeight: '700'}}>Ajouter une Personne</h1>\r\n            <div className=\"personForm__item\">\r\n                <label>Prénom</label>\r\n                <input type=\"text\" placeholder=\"Votre prénom\" value={formData.firstname} name=\"firstname\" onChange={e => stateUpdate(e.target)} required />\r\n            </div>\r\n            <div className=\"personForm__item\">\r\n                <label>Nom</label>\r\n                <input type=\"text\" placeholder=\"Votre nom de famille\" value={formData.lastname} name=\"lastname\" onChange={e => stateUpdate(e.target)} required />\r\n            </div>\r\n            <div className=\"personForm__item\">\r\n                <label>Adresse Email</label>\r\n                <input type=\"email\" placeholder=\"-----@-----.---\" value={formData.address} name=\"address\" onChange={e => stateUpdate(e.target)} required />\r\n            </div>\r\n            <div className=\"personForm__item\">\r\n                <label>Actif</label>\r\n                <select onChange={e => stateUpdate(e.target)} value={formData.isActive} name=\"isActive\">\r\n                    <option value=\"true\">Oui</option>\r\n                    <option value=\"false\">Non</option>\r\n                </select>\r\n            </div>\r\n            <div className=\"personForm__item\">\r\n                <Button \r\n                    variant=\"contained\" \r\n                    color=\"primary\" \r\n                    type=\"submit\"\r\n                    value=\"Ajouter Personne\"\r\n                    style={{ borderRadius: 50 }} \r\n                    endIcon={<AddCircleOutlineIcon />}\r\n                    style={{backgroundColor: '#008080' }}\r\n                >\r\n                    Ajouter Personne\r\n                </Button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport './PersonList.css';\r\nimport $ from \"jquery\";\r\nimport Scrollbars from 'react-custom-scrollbars';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport { putFormDataAsJson, deletePerson, getAllPersonSorteredByColumn } from '../../api/PersonAPI';\r\nimport { convertFormDataToObject } from '../../utils/FormData';\r\nimport { getListOfFilteredID } from '../../utils/ListFilter';\r\nimport Button from '@material-ui/core/Button';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\n\r\n\r\n// Initialisation des valeurs de filtres\r\nconst initialFilteredPersonList = {\r\n    id: '',\r\n    firstname: '',\r\n    lastname: '',\r\n    address: '',\r\n    isActive: ''\r\n}\r\n\r\nconst initialSortPersonList = {\r\n    id: false,\r\n    firstname: false,\r\n    lastname: false,\r\n    address: false,\r\n    isActive: false\r\n}\r\n\r\nexport default function PersonList({ setPersonList, personList }) {\r\n    const classes = useStyles();\r\n    const [editedRowIndex, setEditedRowIndex] = useState(null);\r\n    const [filterOptions, setFilterOptions]  = useState(initialFilteredPersonList);\r\n    const [filteredListPerson, setFilteredListPerson] = useState([]);\r\n    const [sortColumnsStatus, setSortColumnsStatus] = useState(initialSortPersonList);\r\n    const [actualColumnSorted, setActualColumnSorted] = useState(\"id\");\r\n\r\n    // Gestion du state stockant les valeurs de filtrage\r\n    const handleFormFilterInput = (e) => {\r\n        const { value, name } = e.target;\r\n        setFilterOptions(prevState => {\r\n            return {...prevState, [name]: value}\r\n        });\r\n    }\r\n\r\n    // permet de switcher sur le mode édition d'une ligne\r\n    const toggleIsEditing = (e) => {\r\n        if ($(e.currentTarget).attr('class').includes('editableIcon')) {\r\n            const personID = $($(e.currentTarget).parents()[3]).find('.personID').text();\r\n            const editableIndex = filteredListPerson.findIndex(item => parseInt(item.id) === parseInt(personID));\r\n            setEditedRowIndex(editableIndex);\r\n        }\r\n    }   \r\n\r\n    // Element React pour la modification d'une ligne\r\n    const EditableRow = ({ value, name, type, lastRow }) => {\r\n        return (\r\n            <React.Fragment>\r\n            <div style={{ display: \"flex\", justifyContent: \"flex-start\", width: lastRow ? '70%' : '100%' }}>\r\n                <input\r\n                    className={`MuiTypography-root MuiTypography-h7 MuiTypography-displayInline`}\r\n                    defaultValue={value}\r\n                    name={name}\r\n                    type={type}\r\n                    style={{border: '#008080 solid 0.5px', width: '100%', margin: '2px'}}\r\n                />\r\n            </div>\r\n            </React.Fragment>\r\n        )\r\n    };\r\n\r\n    // Gérer le formulaire de la mise à jour d'une personne\r\n    const handleFormSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        // Récupérer les données du formulaire\r\n        const personID = $(e.currentTarget).find('.personID').find('input').attr('value');\r\n        const updateIndex = filteredListPerson.findIndex(item => parseInt(item.id) === parseInt(personID));\r\n        const url = `person/${personID}`;\r\n\r\n        try {\r\n            // Requête PUT\r\n            const { formData, _} = convertFormDataToObject(e);\r\n            let responseData = await putFormDataAsJson({ formData, url });\r\n\r\n            // Mise à jour de la liste des utilisateurs\r\n            setPersonList(prevState => {\r\n                return  [...prevState.slice(0, updateIndex), responseData, ...prevState.slice(updateIndex + 1)];\r\n            });\r\n\r\n            setEditedRowIndex(-1);\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    const sortColumn = (col) => {\r\n        setSortColumnsStatus(prevState => {\r\n            return {...prevState, [col]: !sortColumnsStatus[col]}\r\n        });\r\n        console.log(col);\r\n        setActualColumnSorted(col);\r\n        $('.columnFilter').val(\"\");\r\n    }\r\n\r\n    // Initialisation du state stockant la liste filtrée\r\n    useEffect(() => {\r\n        setFilteredListPerson(personList);\r\n    }, [personList]);\r\n\r\n    // Appel à l'algorithme à chaque fois qu'une valeur de filtrage change\r\n    useEffect(() => {\r\n        const filteredID = getListOfFilteredID(filterOptions, personList);\r\n        if (filteredID.length != 0) {\r\n            setFilteredListPerson(personList.filter((item, index) => filteredID.includes(String(item.id))));\r\n        }\r\n    }, [filterOptions]);\r\n\r\n    useEffect(() => {\r\n        if (sortColumnsStatus[actualColumnSorted]) {\r\n            console.log(actualColumnSorted);\r\n            console.log(sortColumnsStatus[actualColumnSorted]);\r\n            console.log('true');\r\n            getAllPersonSorteredByColumn(actualColumnSorted, \"desc\").then(data => {\r\n                setFilteredListPerson(data);\r\n            }); \r\n        } else {\r\n            console.log('false');\r\n            getAllPersonSorteredByColumn(actualColumnSorted, \"asc\").then(data => {\r\n                setFilteredListPerson(data);\r\n            }); \r\n        }\r\n    }, [actualColumnSorted, sortColumnsStatus]);\r\n\r\n\r\n    return (\r\n        <>\r\n        <Scrollbars style={{ width: '70%', height: '100%' }} renderTrackHorizontal={props => <div {...props} style={{display: 'none'}} className=\"track-horizontal\"/>}>\r\n          <Grid item xs={16} md={12}>\r\n              <List className={classes.List}>\r\n                    <ListItem className={classes.listItem} style={{ backgroundColor: '#9AC2C980' }}>\r\n                        <ListItemText\r\n                            disableTypography\r\n                            primary={<Button type=\"body2\" style={{ fontWeight: 700, width: 10, color: '#004040' }} onClick={() => sortColumn(\"id\")} endIcon={<FilterListIcon />}>ID</Button>}\r\n                            className={classes.listItemText}\r\n                        />\r\n                        <ListItemText\r\n                            disableTypography\r\n                            primary={<Button type=\"body2\" style={{ fontWeight: 700, width: 10, color: '#004040' }} onClick={() => sortColumn(\"firstname\")} endIcon={<FilterListIcon />}>Prénom</Button>}\r\n                            className={classes.listItemText}\r\n                        />\r\n                        <ListItemText\r\n                            disableTypography\r\n                            primary={<Button type=\"body2\" style={{ fontWeight: 700, width: 10, color: '#004040' }} onClick={() => sortColumn(\"lastname\")} endIcon={<FilterListIcon />}>Nom</Button>}\r\n                            className={classes.listItemText}\r\n                        />\r\n                        <ListItemText\r\n                            disableTypography\r\n                            primary={<Button type=\"body2\" style={{ fontWeight: 700, width: 10, color: '#004040' }} onClick={() => sortColumn(\"address\")} endIcon={<FilterListIcon />}>Adresse</Button>}\r\n                            className={classes.listItemText}\r\n                        />\r\n                        <ListItemText\r\n                            disableTypography\r\n                            primary={<Button type=\"body2\" style={{ fontWeight: 700, width: 10, color: '#004040', paddingRight: 30 }} onClick={() => sortColumn(\"isActive\")} endIcon={<FilterListIcon />}>Actif</Button>}\r\n                            className={classes.listItemText}\r\n                        />\r\n                        <ListItemSecondaryAction>\r\n                            <IconButton edge=\"end\" aria-label=\"delete\" type=\"submit\">\r\n                                <SendIcon \r\n                                    style={{display: \"none\"}} \r\n                                />\r\n                            </IconButton>\r\n                        </ListItemSecondaryAction>\r\n                        <ListItemSecondaryAction>\r\n                            <IconButton edge=\"end\" aria-label=\"delete\" type=\"submit\">\r\n                                <SendIcon \r\n                                    style={{display: \"none\"}} \r\n                                />\r\n                            </IconButton>\r\n                        </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                    <form className=\"filterForm\">\r\n                        <ListItem className={classes.listItem}>\r\n                            <ListItemText\r\n                                disableTypography\r\n                                primary={\r\n                                <div style={{ display: \"flex\", justifyContent: \"flex-start\", width: '100%' }}>\r\n                                    <input\r\n                                        className=\"MuiTypography-root MuiTypography-h7 MuiTypography-displayInline columnFilter\"\r\n                                        defaultValue={filterOptions[\"id\"]}\r\n                                        onChange={handleFormFilterInput}\r\n                                        name={\"id\"}\r\n                                        style={{border: '#008080 solid 0.5px', width: '100%', margin: '2px'}}\r\n                                        placeholder=\"Filtrer\"\r\n                                    />\r\n                                </div>}\r\n                                className={classes.listItemText} \r\n                            />\r\n                            <ListItemText\r\n                                disableTypography\r\n                                primary={\r\n                                <div style={{ display: \"flex\", justifyContent: \"flex-start\", width: '100%' }}>\r\n                                    <input\r\n                                        className=\"MuiTypography-root MuiTypography-h7 MuiTypography-displayInline columnFilter\"\r\n                                        defaultValue={filterOptions[\"firstname\"]}\r\n                                        onChange={handleFormFilterInput}\r\n                                        name={\"firstname\"}\r\n                                        style={{border: '#008080 solid 0.5px', width: '100%', margin: '2px'}}\r\n                                        placeholder=\"Filtrer\"\r\n                                    />\r\n                                </div>}\r\n                                className={classes.listItemText}\r\n                            />\r\n                            <ListItemText\r\n                                disableTypography\r\n                                primary={\r\n                                <div style={{ display: \"flex\", justifyContent: \"flex-start\", width: '100%' }}>\r\n                                    <input\r\n                                        className=\"MuiTypography-root MuiTypography-h7 MuiTypography-displayInline columnFilter\"\r\n                                        defaultValue={filterOptions[\"lastname\"]}\r\n                                        onChange={handleFormFilterInput}\r\n                                        name={\"lastname\"}\r\n                                        style={{border: '#008080 solid 0.5px', width: '100%', margin: '2px'}}\r\n                                        placeholder=\"Filtrer\"\r\n                                    />\r\n                                </div>}\r\n                                className={classes.listItemText}\r\n                            />\r\n                            <ListItemText\r\n                                disableTypography\r\n                                primary={\r\n                                <div style={{ display: \"flex\", justifyContent: \"flex-start\", width: '100%' }}>\r\n                                    <input\r\n                                        className=\"MuiTypography-root MuiTypography-h7 MuiTypography-displayInline columnFilter\"\r\n                                        defaultValue={filterOptions[\"address\"]}\r\n                                        onChange={handleFormFilterInput}\r\n                                        name={\"address\"}\r\n                                        style={{border: '#008080 solid 0.5px', width: '100%', margin: '2px'}}\r\n                                        placeholder=\"Filtrer\"    \r\n                                    />\r\n                                </div>}\r\n                                className={classes.listItemText}\r\n                            />\r\n                            <ListItemText\r\n                                disableTypography\r\n                                primary={\r\n                                <div style={{ display: \"flex\", justifyContent: \"flex-start\", width: '70%' }}>\r\n                                    <input\r\n                                        className=\"MuiTypography-root MuiTypography-h7 MuiTypography-displayInline columnFilter\"\r\n                                        defaultValue={filterOptions[\"isActive\"]}\r\n                                        onChange={handleFormFilterInput}\r\n                                        name={\"isActive\"}\r\n                                        style={{border: '#008080 solid 0.5px', width: '100%', margin: '2px'}}\r\n                                        placeholder=\"Filtrer\"\r\n                                    />\r\n                                </div>}\r\n                                className={classes.listItemText}\r\n                            />\r\n                        </ListItem>\r\n                    </form>\r\n                {filteredListPerson.map((item, index) => (\r\n                    index === editedRowIndex ? ( \r\n                        <form className=\"editForm\" onSubmit={handleFormSubmit}>\r\n                            <ListItem className={classes.listItem}>\r\n                                <ListItemText\r\n                                    disableTypography\r\n                                    primary={<EditableRow value={item.id} name={\"id\"}/>}\r\n                                    className={`${classes.listItemText} personID`}\r\n                                />\r\n                                <ListItemText\r\n                                    disableTypography\r\n                                    primary={<EditableRow value={item.firstname} name={\"firstname\"} />}\r\n                                    className={classes.listItemText}\r\n                                />\r\n                                <ListItemText\r\n                                    disableTypography\r\n                                    primary={<EditableRow value={item.lastname} name={\"lastname\"} />}\r\n                                    className={classes.listItemText}\r\n                                />\r\n                                <ListItemText\r\n                                    disableTypography\r\n                                    primary={<EditableRow value={item.address} name={\"address\"} type={\"email\"}/>}\r\n                                    className={classes.listItemText}\r\n                                />\r\n                                <ListItemText\r\n                                    disableTypography\r\n                                    primary={<EditableRow value={item.isActive} name={\"isActive\"} lastRow={true} />}\r\n                                    className={classes.listItemText}\r\n                                />\r\n                                <ListItemSecondaryAction>\r\n                                    <IconButton edge=\"end\" aria-label=\"edit\" type=\"submit\">\r\n                                        <SendIcon \r\n                                            style={{fill: \"#008080\"}} \r\n                                        />\r\n                                    </IconButton>\r\n                                </ListItemSecondaryAction>\r\n                            </ListItem>\r\n                       </form>\r\n                        ) : (\r\n                    <ListItem className={classes.listItem}>\r\n                            <ListItemText\r\n                            disableTypography\r\n                            primary={<Typography type=\"body2\">{item.id}</Typography>}\r\n                            className={`${classes.listItemText} personID`}\r\n                            />\r\n                            <ListItemText\r\n                            disableTypography\r\n                            primary={<Typography type=\"body2\" >{item.firstname}</Typography>}\r\n                            className={classes.listItemText}\r\n                            />\r\n                            <ListItemText\r\n                            disableTypography\r\n                            primary={<Typography type=\"body2\">{item.lastname}</Typography>}\r\n                            className={classes.listItemText}\r\n                            />\r\n                            <ListItemText\r\n                            disableTypography\r\n                            primary={<Typography type=\"body2\">{item.address}</Typography>}\r\n                            className={classes.listItemText}\r\n                            />\r\n                            <ListItemText\r\n                            disableTypography\r\n                            primary={<Typography type=\"body2\">{parseInt(item.isActive) ? '1' : '0'}</Typography>}\r\n                            className={classes.listItemText}\r\n                            />\r\n                        <ListItemSecondaryAction>\r\n                        <IconButton edge=\"end\" aria-label=\"edit\">\r\n                            <EditIcon \r\n                                style={{fill: \"#008080\"}} \r\n                                onClick={toggleIsEditing}\r\n                                className=\"editableIcon\" \r\n                            />\r\n                        </IconButton>\r\n                        <IconButton edge=\"end\" aria-label=\"delete\">\r\n                            <CloseIcon \r\n                                style={{fill: \"#008080\"}} \r\n                                onClick={(e) => {\r\n                                    e.preventDefault();\r\n                                    e.stopPropagation();\r\n                                    const personID = $($(e.currentTarget).parents()[3]).find('.personID').text();\r\n                                    deletePerson(personID).then(() => {\r\n                                        // Récuperer l'index de l'élément à supprimer\r\n                                        const removeIndex = filteredListPerson.findIndex(item => item.id === parseInt(personID));\r\n                                    \r\n                                        // Faire une copie du state\r\n                                        const newArray = [...filteredListPerson];\r\n                                    \r\n                                        // Supprimer l'élément du nouveau tableau\r\n                                        newArray.splice(removeIndex, 1);\r\n                                    \r\n                                        // Mettre à jour le state\r\n                                        setFilteredListPerson(newArray);\r\n                                    });\r\n                                }} \r\n                            />\r\n                        </IconButton>\r\n                        </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                    )\r\n                ))}\r\n              </List>\r\n          </Grid>\r\n        </Scrollbars>\r\n        </>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    listItem: {\r\n      backgroundColor: 'none',\r\n      \"&:hover\": {\r\n          backgroundColor: 'rgba(0,0,0,0.05);',\r\n          cursor: 'pointer'\r\n      },\r\n      padding: 4,\r\n    },\r\n    listItemText: {\r\n        display: 'flex',\r\n        justifyContent: 'flex-start',\r\n        '&:nth-child(1)': {\r\n            width: '10%',\r\n            justifyContent: 'center',\r\n        },\r\n        '&:nth-child(2)': {\r\n            width: '20%'\r\n        },\r\n        '&:nth-child(3)': {\r\n            width: '20%'\r\n        },\r\n        '&:nth-child(4)': {\r\n            width: '30%'\r\n        },\r\n        '&:nth-child(5)': {\r\n            width: '20%',\r\n        }\r\n    },\r\n    button: {\r\n      margin: theme.spacing(1),\r\n      [theme.breakpoints.down(\"sm\")]: {\r\n        minWidth: 32,\r\n        paddingLeft: 8,\r\n        paddingRight: 8,\r\n        marginBottom: 40,\r\n        cursor: \"pointer\",\r\n        \"& .MuiButton-startIcon\": {\r\n          margin: 0\r\n        }\r\n      }\r\n    },\r\n    buttonText: {\r\n      [theme.breakpoints.down(\"sm\")]: {\r\n        display: \"none\"\r\n      },\r\n      display: \"flex\",\r\n      marginRight: 5\r\n    },\r\n    List: {\r\n        padding: 0,\r\n    },\r\n    Input: {\r\n        '&:nth-child(5)': {\r\n            width: '70%'\r\n        }\r\n    }\r\n}));","// Algorithme de filtrage de la liste\r\nexport const getListOfFilteredID = (filterOptions, list) => {\r\n    let counter = {}\r\n    list.map(item => counter[item.id] = 0);\r\n    list.map(item => {\r\n        Object.entries(item).map(val => {\r\n            if (String(val[1]).toLowerCase().startsWith(String(filterOptions[val[0]]).toLowerCase()) && String(filterOptions[val[0]]) != '') {\r\n                counter[item[\"id\"]] += 1;\r\n            }\r\n        });  \r\n    });\r\n    const numberOfFieldsFilled = Object.values(filterOptions).filter(Boolean).length;\r\n    counter = Object.entries(counter).filter(val => val[1] === numberOfFieldsFilled);\r\n    counter = Object.fromEntries(counter);\r\n    const idFiltered = Object.keys(counter);\r\n\r\n    return idFiltered;\r\n};","import './App.css';\nimport PersonForm from './components/PersonForm/PersonForm';\nimport PersonList from './components/PersonList/PersonList';\nimport { useState, useEffect } from 'react';\nimport { getAllPerson } from \"../src/api/PersonAPI\";\n\n// Objet de réinitialisation du formulaire d'ajout\nconst initialState = {\n  id: '',\n  firstname: '',\n  lastname: '',\n  address: '',\n  isActive: '1'\n}\n\nfunction App() {\n  // State pour stocker toutes les personnes de la base de données\n  const [personList, setPersonList] = useState([]);\n  // State pour stocker les informations du formulaire d'ajout\n  const [formData, setFormData] = useState(initialState);\n\n  // Récupération de toutes les personnes au lancement de l'application\n  useEffect(() => {\n    getAllPerson()\n      .then(data => setPersonList(data));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <PersonForm setPersonList={setPersonList} setFormData={setFormData} formData={formData} style={{ backgroundColor: '#1169cf' }} initialState={initialState} />\n      <PersonList setFormData={setFormData} setPersonList={setPersonList} personList={personList} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}